---
--- test cases for GPU Cache
---
\t on
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS gpu_cache_temp_test CASCADE;
CREATE SCHEMA gpu_cache_temp_test;
RESET client_min_messages;
SET search_path = gpu_cache_temp_test,public;
---
--- Creating a table on GPU cache
---
CREATE TABLE cache_test_table (
  id   int,
  a    int1,
  b    int2,
  c    int4,
  d    int8,
  e    float2,
  f    float4,
  g    float8,
  h    text,
  i    varchar(32),
  j    char(32)
);
---
--- GPU Cache configuration
---
-- syntax error
CREATE TRIGGER row_sync_test_ng01 AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('cpu_device_id=0');
ERROR:  gpucache: unknown option [cpu_device_id]=[0]
-- validation error
CREATE TRIGGER row_sync_test_ng03 AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('redo_buffer_size=4m');
ERROR:  gpucache: 'redo_buffer_size' is too small (4194304)
-- success
CREATE TRIGGER row_sync_test AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW 
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('gpu_device_id=0,max_num_rows=10000,redo_buffer_size=150m,gpu_sync_threshold=10m,gpu_sync_interval=4');
ALTER TABLE cache_test_table ENABLE ALWAYS TRIGGER row_sync_test;
-- duplicate row-sync trigger error
CREATE TRIGGER row_sync_test_ng04 AFTER INSERT OR UPDATE OR DELETE
    ON cache_test_table FOR ROW 
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger();
ERROR:  gpucache: relation cache_test_table has multiple row-sync triggers
-- Make GPU cache 
INSERT INTO cache_test_table(id) values (1);
-- Check gpucache_info table.
SELECT config_options FROM pgstrom.gpucache_info WHERE table_name='cache_test_table' AND database_name=current_database();
 gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

TRUNCATE TABLE cache_test_table;
-- Force to use GPU Cache
SET enable_seqscan=off;
---
--- INSERT 
---
EXPLAIN (costs off, verbose)
INSERT INTO cache_test_table(id) values (1);
 Insert on gpu_cache_temp_test.cache_test_table
   ->  Result
         Output: 1, NULL::int1, NULL::smallint, NULL::integer, NULL::bigint, NULL::float2, NULL::real, NULL::double precision, NULL::text, NULL::character varying(32), NULL::character(32)

SELECT pgstrom.random_setseed(20190608);
 

INSERT INTO cache_test_table (
  SELECT x 
  ,pgstrom.random_int(1,-128,127)     -- a int1
  ,pgstrom.random_int(1,-32768,32767)  -- b int2
  ,pgstrom.random_int(1,-2147483648,2147483647)  -- c int4
  ,pgstrom.random_int(1,-9223372036854775808,9223372036854775807)   -- d int8
  ,pgstrom.random_float(0.5, -32000, 32000)   -- e float2
  ,pgstrom.random_float(0.5, -32000, 32000)   -- f float4
  ,pgstrom.random_float(0.5, -32000, 32000)   -- g float8
  ,LEFT(MD5((x%479)::TEXT),(x%32+1)::INTEGER)     -- h text
  ,LEFT(MD5((x%479+1)::TEXT),(x%32+1)::INTEGER)     -- i text
  ,LEFT(MD5((x%479+2)::TEXT),(x%32+1)::INTEGER)     -- j text
  FROM generate_series(1,4000) x
);
VACUUM ANALYZE;
-- Copy inserted records to normal table(without GPU Cache)
SELECT * INTO TEMPORARY normal_table FROM cache_test_table; 
---
--- UPDATE
---
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET a = (a+1) % 127 WHERE a%97=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ((((a + 1) % 127))::int1), ctid
         GPU Projection: (((cache_test_table.a + 1) % 127))::int1, cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 97) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET a = (a+1) % 127 WHERE a%97=0;
UPDATE normal_table     SET a = (a+1) % 127 WHERE a%97=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET b = (b+1) % 32767 WHERE a%89=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ((((b + 1) % 32767))::smallint), ctid
         GPU Projection: (((cache_test_table.b + 1) % 32767))::smallint, cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 89) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET b = (b+1) % 32767 WHERE a%89=0;
UPDATE normal_table     SET b = (b+1) % 32767 WHERE a%89=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET c = (c+1) % 2147483647 WHERE a%83=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((c + 1) % 2147483647)), ctid
         GPU Projection: ((cache_test_table.c + 1) % 2147483647), cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 83) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET c = (c+1) % 2147483647 WHERE a%83=0;
UPDATE normal_table     SET c = (c+1) % 2147483647 WHERE a%83=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET d = (d+1) % 9223372036854775807 WHERE a%79=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((d + 1) % '9223372036854775807'::bigint)), ctid
         GPU Projection: ((cache_test_table.d + 1) % '9223372036854775807'::bigint), cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 79) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET d = (d+1) % 9223372036854775807 WHERE a%79=0;
UPDATE normal_table     SET d = (d+1) % 9223372036854775807 WHERE a%79=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET e = (e+0.5)::numeric % 999999 WHERE a%73=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((((e + '0.5'::double precision))::numeric % '999999'::numeric))::float2), ctid
         GPU Projection: ((((cache_test_table.e + '0.5'::double precision))::numeric % '999999'::numeric))::float2, cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 73) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET e = (e+0.5)::numeric % 999999 WHERE a%73=0;
UPDATE normal_table     SET e = (e+0.5)::numeric % 999999 WHERE a%73=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET f = (f+0.5)::numeric % 999999 WHERE a%71=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((((f + '0.5'::double precision))::numeric % '999999'::numeric))::real), ctid
         GPU Projection: ((((cache_test_table.f + '0.5'::double precision))::numeric % '999999'::numeric))::real, cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 71) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET f = (f+0.5)::numeric % 999999 WHERE a%71=0;
UPDATE normal_table     SET f = (f+0.5)::numeric % 999999 WHERE a%71=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET g = (g+0.5)::numeric % 999999 WHERE a%67=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: (((((g + '0.5'::double precision))::numeric % '999999'::numeric))::double precision), ctid
         GPU Projection: ((((cache_test_table.g + '0.5'::double precision))::numeric % '999999'::numeric))::double precision, cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 67) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET g = (g+0.5)::numeric % 999999 WHERE a%67=0;
UPDATE normal_table     SET g = (g+0.5)::numeric % 999999 WHERE a%67=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET h = 'delete' WHERE a%103=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: 'delete'::text, ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 103) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET h = 'delete' WHERE a%103=0;
UPDATE normal_table     SET h = 'delete' WHERE a%103=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET i = 'delete' WHERE a%107=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: 'delete'::character varying(32), ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 107) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET i = 'delete' WHERE a%107=0;
UPDATE normal_table     SET i = 'delete' WHERE a%107=0;
EXPLAIN (costs off, verbose)
UPDATE cache_test_table SET j = 'delete' WHERE a%109=0;
 Update on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: 'delete                          '::character(32), ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.a)::integer % 109) = 0)
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

UPDATE cache_test_table SET j = 'delete' WHERE a%109=0;
UPDATE normal_table     SET j = 'delete' WHERE a%109=0;
---
--- DETELE
---
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE a%101=0 OR a IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: ((((cache_test_table.a)::integer % 101) = 0) OR (cache_test_table.a IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE a%101=0 OR a IS NULL;
DELETE FROM normal_table WHERE a%101=0 OR a IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE b%101=0 OR b IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: ((((cache_test_table.b)::integer % 101) = 0) OR (cache_test_table.b IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE b%101=0 OR b IS NULL;
DELETE FROM normal_table WHERE b%101=0 OR b IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE c%101=0 OR c IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.c % 101) = 0) OR (cache_test_table.c IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE c%101=0 OR c IS NULL;
DELETE FROM normal_table WHERE c%101=0 OR c IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE d%101=0 OR d IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.d % '101'::bigint) = 0) OR (cache_test_table.d IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE d%101=0 OR d IS NULL;
DELETE FROM normal_table WHERE d%101=0 OR d IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE e::int8%101=0 OR e IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: ((((cache_test_table.e)::bigint % '101'::bigint) = 0) OR (cache_test_table.e IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE e::int8%101=0 OR e IS NULL;
DELETE FROM normal_table WHERE e::int8%101=0 OR e IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE f::int8%101=0 OR f IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: ((((cache_test_table.f)::bigint % '101'::bigint) = 0) OR (cache_test_table.f IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE f::int8%101=0 OR f IS NULL;
DELETE FROM normal_table WHERE f::int8%101=0 OR f IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE g::int8%101=0 OR g IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: ((((cache_test_table.g)::bigint % '101'::bigint) = 0) OR (cache_test_table.g IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE g::int8%101=0 OR g IS NULL;
DELETE FROM normal_table WHERE g::int8%101=0 OR g IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE h='delete' OR h IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: ((cache_test_table.h = 'delete'::text) OR (cache_test_table.h IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE h='delete' OR h IS NULL;
DELETE FROM normal_table WHERE h='delete' OR h IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE i='delete' OR i IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: (((cache_test_table.i)::text = 'delete'::text) OR (cache_test_table.i IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE i='delete' OR i IS NULL;
DELETE FROM normal_table WHERE i='delete' OR i IS NULL;
EXPLAIN (costs off, verbose) 
DELETE FROM cache_test_table WHERE j='delete' OR j IS NULL;
 Delete on gpu_cache_temp_test.cache_test_table
   ->  Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
         Output: ctid
         GPU Projection: cache_test_table.ctid
         GPU Scan Quals: ((cache_test_table.j = 'delete'::bpchar) OR (cache_test_table.j IS NULL))
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

DELETE FROM cache_test_table WHERE j='delete' OR j IS NULL;
DELETE FROM normal_table WHERE j='delete' OR j IS NULL;
---
--- ALTER TABLE 
---
ALTER TABLE cache_test_table ADD COLUMN k int2;
ALTER TABLE normal_table ADD COLUMN k int2;
UPDATE cache_test_table SET k=b/2;
UPDATE normal_table SET k=b/2;
---
--- SELECT 
---
VACUUM ANALYZE cache_test_table;
EXPLAIN (costs off, verbose)
SELECT * FROM cache_test_table WHERE a % 3 = 0;
 Custom Scan (GpuScan) on gpu_cache_temp_test.cache_test_table
   Output: id, a, b, c, d, e, f, g, h, i, j, k
   GPU Projection: cache_test_table.id, cache_test_table.a, cache_test_table.b, cache_test_table.c, cache_test_table.d, cache_test_table.e, cache_test_table.f, cache_test_table.g, cache_test_table.h, cache_test_table.i, cache_test_table.j, cache_test_table.k
   GPU Scan Quals: (((cache_test_table.a)::integer % 3) = 0)
   GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
   GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

--clms=("a" "b" "c" "d" "e" "f" "g") ; for a in ${clms[@]}; do echo "COUNT($a) AS ${a}_count,ROUND(SUM($a)::NUMERIC/100,2) AS ${a}_sum,ROUND(AVG($a)::NUMERIC/100,2) AS ${a}_avg,MAX($a) AS ${a}_max,MIN($a) AS ${a}_min," ; done
VACUUM ANALYZE cache_test_table;
EXPLAIN (costs off, verbose)
SELECT 
COUNT(a) AS a_count,SUM(a) AS a_sum,AVG(a) AS a_avg,MAX(a) AS a_max,MIN(a) AS a_min,
COUNT(b) AS b_count,SUM(b) AS b_sum,AVG(b) AS b_avg,MAX(b) AS b_max,MIN(b) AS b_min,
COUNT(c) AS c_count,SUM(c) AS c_sum,AVG(c) AS c_avg,MAX(c) AS c_max,MIN(c) AS c_min,
COUNT(d) AS d_count,SUM(d) AS d_sum,AVG(d) AS d_avg,MAX(d) AS d_max,MIN(d) AS d_min,
COUNT(e) AS e_count,SUM(e) AS e_sum,AVG(e) AS e_avg,MAX(e) AS e_max,MIN(e) AS e_min,
COUNT(f) AS f_count,SUM(f) AS f_sum,AVG(f) AS f_avg,MAX(f) AS f_max,MIN(f) AS f_min,
COUNT(g) AS g_count,SUM(g) AS g_sum,AVG(g) AS g_avg,MAX(g) AS g_max,MIN(g) AS g_min
INTO TEMPORARY cached_result FROM cache_test_table WHERE id%3=0;
 Aggregate
   Output: pgstrom.fcount((pgstrom.nrows(a))), pgstrom.sum_int((pgstrom.psum((a)::bigint))), pgstrom.avg_int((pgstrom.pavg((a)::bigint))), pgstrom.max_i1((pgstrom.pmax((a)::integer))), pgstrom.min_i1((pgstrom.pmin((a)::integer))), pgstrom.fcount((pgstrom.nrows(b))), pgstrom.sum_int((pgstrom.psum((b)::bigint))), pgstrom.avg_int((pgstrom.pavg((b)::bigint))), pgstrom.max_i2((pgstrom.pmax((b)::integer))), pgstrom.min_i2((pgstrom.pmin((b)::integer))), pgstrom.fcount((pgstrom.nrows(c))), pgstrom.sum_int((pgstrom.psum((c)::bigint))), pgstrom.avg_int((pgstrom.pavg((c)::bigint))), pgstrom.max_i4((pgstrom.pmax(c))), pgstrom.min_i4((pgstrom.pmin(c))), pgstrom.fcount((pgstrom.nrows(d))), pgstrom.sum_int64((pgstrom.psum64(d))), pgstrom.avg_int64((pgstrom.pavg64(d))), pgstrom.max_i8((pgstrom.pmax(d))), pgstrom.min_i8((pgstrom.pmin(d))), pgstrom.fcount((pgstrom.nrows(e))), pgstrom.sum_fp64((pgstrom.psum((e)::double precision))), pgstrom.avg_fp((pgstrom.pavg((e)::double precision))), pgstrom.max_f2((pgstrom.pmax((e)::double precision))), pgstrom.min_f2((pgstrom.pmin((e)::double precision))), pgstrom.fcount((pgstrom.nrows(f))), pgstrom.sum_fp32((pgstrom.psum((f)::double precision))), pgstrom.avg_fp((pgstrom.pavg((f)::double precision))), pgstrom.max_f4((pgstrom.pmax((f)::double precision))), pgstrom.min_f4((pgstrom.pmin((f)::double precision))), pgstrom.fcount((pgstrom.nrows(g))), pgstrom.sum_fp64((pgstrom.psum(g))), pgstrom.avg_fp((pgstrom.pavg(g))), pgstrom.max_f8((pgstrom.pmax(g))), pgstrom.min_f8((pgstrom.pmin(g)))
   ->  Custom Scan (GpuPreAgg) on gpu_cache_temp_test.cache_test_table
         Output: (pgstrom.nrows(a)), (pgstrom.psum((a)::bigint)), (pgstrom.pavg((a)::bigint)), (pgstrom.pmax((a)::integer)), (pgstrom.pmin((a)::integer)), (pgstrom.nrows(b)), (pgstrom.psum((b)::bigint)), (pgstrom.pavg((b)::bigint)), (pgstrom.pmax((b)::integer)), (pgstrom.pmin((b)::integer)), (pgstrom.nrows(c)), (pgstrom.psum((c)::bigint)), (pgstrom.pavg((c)::bigint)), (pgstrom.pmax(c)), (pgstrom.pmin(c)), (pgstrom.nrows(d)), (pgstrom.psum64(d)), (pgstrom.pavg64(d)), (pgstrom.pmax(d)), (pgstrom.pmin(d)), (pgstrom.nrows(e)), (pgstrom.psum((e)::double precision)), (pgstrom.pavg((e)::double precision)), (pgstrom.pmax((e)::double precision)), (pgstrom.pmin((e)::double precision)), (pgstrom.nrows(f)), (pgstrom.psum((f)::double precision)), (pgstrom.pavg((f)::double precision)), (pgstrom.pmax((f)::double precision)), (pgstrom.pmin((f)::double precision)), (pgstrom.nrows(g)), (pgstrom.psum(g)), (pgstrom.pavg(g)), (pgstrom.pmax(g)), (pgstrom.pmin(g))
         GPU Projection: pgstrom.nrows(cache_test_table.a), pgstrom.psum((cache_test_table.a)::bigint), pgstrom.pavg((cache_test_table.a)::bigint), pgstrom.pmax((cache_test_table.a)::integer), pgstrom.pmin((cache_test_table.a)::integer), pgstrom.nrows(cache_test_table.b), pgstrom.psum((cache_test_table.b)::bigint), pgstrom.pavg((cache_test_table.b)::bigint), pgstrom.pmax((cache_test_table.b)::integer), pgstrom.pmin((cache_test_table.b)::integer), pgstrom.nrows(cache_test_table.c), pgstrom.psum((cache_test_table.c)::bigint), pgstrom.pavg((cache_test_table.c)::bigint), pgstrom.pmax(cache_test_table.c), pgstrom.pmin(cache_test_table.c), pgstrom.nrows(cache_test_table.d), pgstrom.psum64(cache_test_table.d), pgstrom.pavg64(cache_test_table.d), pgstrom.pmax(cache_test_table.d), pgstrom.pmin(cache_test_table.d), pgstrom.nrows(cache_test_table.e), pgstrom.psum((cache_test_table.e)::double precision), pgstrom.pavg((cache_test_table.e)::double precision), pgstrom.pmax((cache_test_table.e)::double precision), pgstrom.pmin((cache_test_table.e)::double precision), pgstrom.nrows(cache_test_table.f), pgstrom.psum((cache_test_table.f)::double precision), pgstrom.pavg((cache_test_table.f)::double precision), pgstrom.pmax((cache_test_table.f)::double precision), pgstrom.pmin((cache_test_table.f)::double precision), pgstrom.nrows(cache_test_table.g), pgstrom.psum(cache_test_table.g), pgstrom.pavg(cache_test_table.g), pgstrom.pmax(cache_test_table.g), pgstrom.pmin(cache_test_table.g)
         GPU Scan Quals: ((cache_test_table.id % 3) = 0)
         GPU Group Key: 
         GPU Cache: GPU0 [phase: ready, max_num_rows: 10000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=10000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

SELECT 
COUNT(a) AS a_count,SUM(a) AS a_sum,AVG(a) AS a_avg,MAX(a) AS a_max,MIN(a) AS a_min,
COUNT(b) AS b_count,SUM(b) AS b_sum,AVG(b) AS b_avg,MAX(b) AS b_max,MIN(b) AS b_min,
COUNT(c) AS c_count,SUM(c) AS c_sum,AVG(c) AS c_avg,MAX(c) AS c_max,MIN(c) AS c_min,
COUNT(d) AS d_count,SUM(d) AS d_sum,AVG(d) AS d_avg,MAX(d) AS d_max,MIN(d) AS d_min,
COUNT(e) AS e_count,SUM(e) AS e_sum,AVG(e) AS e_avg,MAX(e) AS e_max,MIN(e) AS e_min,
COUNT(f) AS f_count,SUM(f) AS f_sum,AVG(f) AS f_avg,MAX(f) AS f_max,MIN(f) AS f_min,
COUNT(g) AS g_count,SUM(g) AS g_sum,AVG(g) AS g_avg,MAX(g) AS g_max,MIN(g) AS g_min
INTO TEMPORARY cached_result FROM cache_test_table WHERE id%3=0;
SELECT
COUNT(a) AS a_count,SUM(a) AS a_sum,AVG(a) AS a_avg,MAX(a) AS a_max,MIN(a) AS a_min,
COUNT(b) AS b_count,SUM(b) AS b_sum,AVG(b) AS b_avg,MAX(b) AS b_max,MIN(b) AS b_min,
COUNT(c) AS c_count,SUM(c) AS c_sum,AVG(c) AS c_avg,MAX(c) AS c_max,MIN(c) AS c_min,
COUNT(d) AS d_count,SUM(d) AS d_sum,AVG(d) AS d_avg,MAX(d) AS d_max,MIN(d) AS d_min,
COUNT(e) AS e_count,SUM(e) AS e_sum,AVG(e) AS e_avg,MAX(e) AS e_max,MIN(e) AS e_min,
COUNT(f) AS f_count,SUM(f) AS f_sum,AVG(f) AS f_avg,MAX(f) AS f_max,MIN(f) AS f_min,
COUNT(g) AS g_count,SUM(g) AS g_sum,AVG(g) AS g_avg,MAX(g) AS g_max,MIN(g) AS g_min
INTO TEMPORARY normal_result FROM normal_table WHERE id%3=0;
--clms=("a" "b" "c" "d" "e" "f" "g") ; mtds=("count" "sum" "avg" "max" "min"); for a in ${clms[@]}; do for m in ${mtds[@]}; do echo ",ABS(c.${a}_${m} - n.${a}_${m}) < 1 AS ${a}_${m}_ok" ; done ; done;
SELECT 
ABS(c.a_count - n.a_count) < 1 AS a_count_ok
,ABS(c.a_sum - n.a_sum) < 1 AS a_sum_ok
,ABS(c.a_avg - n.a_avg) < 1 AS a_avg_ok
,ABS(c.a_max - n.a_max) < 1 AS a_max_ok
,ABS(c.a_min - n.a_min) < 1 AS a_min_ok
,ABS(c.b_count - n.b_count) < 1 AS b_count_ok
,ABS(c.b_sum - n.b_sum) < 1 AS b_sum_ok
,ABS(c.b_avg - n.b_avg) < 1 AS b_avg_ok
,ABS(c.b_max - n.b_max) < 1 AS b_max_ok
,ABS(c.b_min - n.b_min) < 1 AS b_min_ok
,ABS(c.c_count - n.c_count) < 1 AS c_count_ok
,ABS(c.c_sum - n.c_sum) < 1 AS c_sum_ok
,ABS(c.c_avg - n.c_avg) < 1 AS c_avg_ok
,ABS(c.c_max - n.c_max) < 1 AS c_max_ok
,ABS(c.c_min - n.c_min) < 1 AS c_min_ok
,ABS(c.d_count - n.d_count) < 1 AS d_count_ok
,ABS(c.d_sum - n.d_sum) < 1 AS d_sum_ok
,ABS(c.d_avg - n.d_avg) < 1 AS d_avg_ok
,ABS(c.d_max - n.d_max) < 1 AS d_max_ok
,ABS(c.d_min - n.d_min) < 1 AS d_min_ok
,ABS(c.e_count - n.e_count) < 1 AS e_count_ok
,ABS(c.e_sum - n.e_sum)::float8/ABS(n.e_sum) < 0.00001 AS e_sum_ok
,ABS(c.e_avg - n.e_avg)::float8/ABS(c.e_avg) < 0.00001 AS e_avg_ok
,ABS(c.e_max - n.e_max) < 1 AS e_max_ok
,ABS(c.e_min - n.e_min) < 1 AS e_min_ok
,ABS(c.f_count - n.f_count) < 1 AS f_count_ok
,ABS(c.f_sum - n.f_sum)::float8/ABS(n.f_sum) < 0.00001 AS f_sum_ok
,ABS(c.f_avg - n.f_avg)::float8/ABS(c.f_avg) < 0.00001 AS f_avg_ok
,ABS(c.f_max - n.f_max) < 1 AS f_max_ok
,ABS(c.f_min - n.f_min) < 1 AS f_min_ok
,ABS(c.g_count - n.g_count) < 1 AS g_count_ok
,ABS(c.g_sum - n.g_sum)::float8/ABS(n.g_sum) < 0.00001 AS g_sum_ok
,ABS(c.g_avg - n.g_avg)::float8/ABS(c.g_avg) < 0.00001 AS g_avg_ok
,ABS(c.g_max - n.g_max) < 1 AS g_max_ok
,ABS(c.g_min - n.g_min) < 1 AS g_min_ok
 FROM cached_result AS c,
normal_result AS n
WHERE c.a_count = n.a_count;
 t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t        | t          | t        | t        | t        | t

---
--- TRUNCATE
---
TRUNCATE TABLE cache_test_table;
TRUNCATE TABLE normal_table;
SELECT COUNT(*) = 0 AS ok FROM cache_test_table;
 t

SELECT COUNT(*) = 0 AS ok FROM normal_table;
 t

---
--- corruption_check
---
CREATE TABLE cache_corruption_test (
  id   int,
  a    int1,
  b    int2,
  c    int4,
  d    int8,
  e    float2,
  f    float4,
  g    float8,
  h    text,
  i    varchar(32),
  j    char(32)
);
CREATE TRIGGER row_sync_corruption AFTER INSERT OR UPDATE OR DELETE ON cache_corruption_test FOR ROW 
    EXECUTE FUNCTION pgstrom.gpucache_sync_trigger('gpu_device_id=0,max_num_rows=5000,redo_buffer_size=150m,gpu_sync_threshold=10m,gpu_sync_interval=4');
ALTER TABLE cache_corruption_test ENABLE ALWAYS TRIGGER row_sync_corruption;
-- check phase
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';

-- INSERT 4000 rows ( < max: 5000 rows )
INSERT INTO cache_corruption_test (
  SELECT x 
  ,pgstrom.random_int(1,-128,127)     -- a int1
  ,pgstrom.random_int(1,-32768,32767)  -- b int2
  ,pgstrom.random_int(1,-2147483648,2147483647)  -- c int4
  ,pgstrom.random_int(1,-9223372036854775808,9223372036854775807)   -- d int8
  ,pgstrom.random_float(0.5, -32000, 32000)   -- e float2
  ,pgstrom.random_float(0.5, -32000, 32000)   -- f float4
  ,pgstrom.random_float(0.5, -32000, 32000)   -- f float8
  ,LEFT(MD5((x%479)::TEXT),(x%32+1)::INTEGER)     -- h text
  ,LEFT(MD5((x%479+1)::TEXT),(x%32+1)::INTEGER)     -- i text
  ,LEFT(MD5((x%479+2)::TEXT),(x%32+1)::INTEGER)     -- j text
  FROM generate_series(1,4000) x
);
-- Apply to GPUCache
SELECT pgstrom.gpucache_apply_redo('cache_corruption_test') AS apply_redo_result;
 

-- phase should be 'is_ready'
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';
 is_ready

-- check GPUCache is still usable.
VACUUM ANALYZE cache_corruption_test;
EXPLAIN (costs off, verbose)
SELECT * FROM cache_corruption_test WHERE b%3=0;
 Custom Scan (GpuScan) on gpu_cache_temp_test.cache_corruption_test
   Output: id, a, b, c, d, e, f, g, h, i, j
   GPU Projection: cache_corruption_test.id, cache_corruption_test.a, cache_corruption_test.b, cache_corruption_test.c, cache_corruption_test.d, cache_corruption_test.e, cache_corruption_test.f, cache_corruption_test.g, cache_corruption_test.h, cache_corruption_test.i, cache_corruption_test.j
   GPU Scan Quals: (((cache_corruption_test.b)::integer % 3) = 0)
   GPU Cache: GPU0 [phase: ready, max_num_rows: 5000]
   GPU Cache Options: gpu_device_id=0,max_num_rows=5000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

-- update to make the table corrupted
UPDATE cache_corruption_test SET d=d/2 WHERE id in (SELECT id FROM cache_corruption_test LIMIT 1001);
WARNING:  gpucache: rowid exceeds max_num_rows (5000), so it is now switched to 'corrupted' state
-- Apply to GPUCache (returns error because the table is corrupted)
SELECT pgstrom.gpucache_apply_redo('cache_corruption_test') AS apply_redo_result;
 

-- phase should be 'corrupted'
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';
 corrupted

-- check GPUCache is not usable.
VACUUM ANALYZE cache_corruption_test;
EXPLAIN (costs off, verbose)
SELECT * FROM cache_corruption_test WHERE b%3=0;
 Custom Scan (GpuScan) on gpu_cache_temp_test.cache_corruption_test
   Output: id, a, b, c, d, e, f, g, h, i, j
   GPU Projection: cache_corruption_test.id, cache_corruption_test.a, cache_corruption_test.b, cache_corruption_test.c, cache_corruption_test.d, cache_corruption_test.e, cache_corruption_test.f, cache_corruption_test.g, cache_corruption_test.h, cache_corruption_test.i, cache_corruption_test.j
   GPU Scan Quals: (((cache_corruption_test.b)::integer % 3) = 0)
   GPU Cache: GPU0 [phase: corrupted, max_num_rows: 5000]
   GPU Cache Options: gpu_device_id=0,max_num_rows=5000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

-- Recover GPUCache
SELECT pgstrom.gpucache_recovery('cache_corruption_test');
 

-- phase should be is_ready
SELECT phase FROM pgstrom.gpucache_info WHERE table_name='cache_corruption_test';
 is_empty

VACUUM ANALYZE cache_corruption_test;
EXPLAIN (costs off, verbose)
SELECT count(*) FROM cache_corruption_test;
 Aggregate
   Output: pgstrom.fcount((pgstrom.nrows()))
   ->  Custom Scan (GpuPreAgg) on gpu_cache_temp_test.cache_corruption_test
         Output: (pgstrom.nrows())
         GPU Projection: pgstrom.nrows()
         GPU Group Key: 
         GPU Cache: GPU0 [phase: empty, max_num_rows: 5000]
         GPU Cache Options: gpu_device_id=0,max_num_rows=5000,redo_buffer_size=157286400,gpu_sync_interval=4000000,gpu_sync_threshold=10485760

-- cleanup temporary resource
SET client_min_messages = error;
DROP SCHEMA gpu_cache_temp_test CASCADE;
-- Checking GPUCache is removed correctly.
SELECT count(*) = 0 AS ok FROM pgstrom.gpucache_info WHERE table_name in ('cache_test_table','cache_corruption_test') AND database_name=current_database();
 t

