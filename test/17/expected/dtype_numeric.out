---
--- Micro test cases for numeric operators / functions
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_dtype_numeric_temp CASCADE;
CREATE SCHEMA regtest_dtype_numeric_temp;
RESET client_min_messages;
SET search_path = regtest_dtype_numeric_temp,public;
CREATE TABLE rt_numeric (
  id    int,
  a     int2,
  b     int4,
  c     int8,
  d     float2,
  e     float4,
  f     float8,
  x     numeric,
  y     numeric(12,3),
  z     numeric(12,3)
);
SELECT pgstrom.random_setseed(20190611);
 random_setseed 
----------------
 
(1 row)

INSERT INTO rt_numeric (
  SELECT x, pgstrom.random_int(1,   -20000,   20000),
            pgstrom.random_int(1,  -200000,  200000),
            pgstrom.random_int(1, -2000000, 2000000),
            pgstrom.random_float(1,   -3200.0,   3200.0),
            pgstrom.random_float(1,  -32000.0,  32000.0),
            pgstrom.random_float(1, -320000.0, 320000.0),
            pgstrom.random_float(1,    -20000,    20000)::numeric,
            pgstrom.random_int(1, -2000000000,
                                   2000000000)::numeric / 1000::numeric,
            pgstrom.random_int(1, -2000000000,
                                   2000000000)::numeric / 1000::numeric
    FROM generate_series(1,3000) x);
ALTER TABLE rt_numeric ADD p int1;
UPDATE rt_numeric SET p=((id-1)%256-128);
VACUUM ANALYZE;
-- force to use GpuScan, instead of SeqScan
SET enable_seqscan = off;
-- cast operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a::numeric, b::numeric, c::numeric,
           d::numeric, e::numeric, f::numeric, p::numeric
  INTO test01g
  FROM rt_numeric
 WHERE id > 0;
                                                                                                   QUERY PLAN                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_numeric_temp.rt_numeric
   Output: id, ((a)::numeric), ((b)::numeric), ((c)::numeric), ((d)::numeric), ((e)::numeric), ((f)::numeric), ((p)::numeric)
   GPU Projection: rt_numeric.id, (rt_numeric.a)::numeric, (rt_numeric.b)::numeric, (rt_numeric.c)::numeric, (rt_numeric.d)::numeric, (rt_numeric.e)::numeric, (rt_numeric.f)::numeric, (rt_numeric.p)::numeric
   GPU Scan Quals: (rt_numeric.id > 0)
(4 rows)

SELECT id, a::numeric, b::numeric, c::numeric,
           d::numeric, e::numeric, f::numeric, p::numeric
  INTO test01g
  FROM rt_numeric
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, a::numeric, b::numeric, c::numeric,
           d::numeric, e::numeric, f::numeric, p::numeric
  INTO test01p
  FROM rt_numeric
 WHERE id > 0;
SELECT g.*, p.*
  FROM test01g g JOIN test01p p ON g.id = p.id
 WHERE @(g.a - p.a) > 0
    OR @(g.b - p.b) > 0
    OR @(g.c - p.c) > 0
    OR @(g.d - p.d) > 0.5
    OR @(g.e - p.e) > 0.1
    OR @(g.f - p.f) > 0.01;
 id | a | b | c | d | e | f | p | id | a | b | c | d | e | f | p 
----+---+---+---+---+---+---+---+----+---+---+---+---+---+---+---
(0 rows)

SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, x::int2 i2, y::int4 i4, z::int8 i8,
           x::float2 f2, y::float4 f4, z::float8 f8,
           CASE WHEN x BETWEEN -128 AND 127 THEN x::int1 ELSE 0 END i1
  INTO test02g
  FROM rt_numeric
 WHERE id > 0;
                                                                                                                                                           QUERY PLAN                                                                                                                                                           
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_numeric_temp.rt_numeric
   Output: id, ((x)::smallint), ((y)::integer), ((z)::bigint), ((x)::float2), ((y)::real), ((z)::double precision), (CASE WHEN ((x >= '-128'::numeric) AND (x <= '127'::numeric)) THEN ((x)::int1)::integer ELSE 0 END)
   GPU Projection: rt_numeric.id, (rt_numeric.x)::smallint, (rt_numeric.y)::integer, (rt_numeric.z)::bigint, (rt_numeric.x)::float2, (rt_numeric.y)::real, (rt_numeric.z)::double precision, CASE WHEN ((rt_numeric.x >= '-128'::numeric) AND (rt_numeric.x <= '127'::numeric)) THEN ((rt_numeric.x)::int1)::integer ELSE 0 END
   GPU Scan Quals: (rt_numeric.id > 0)
(4 rows)

SELECT id, x::int2 i2, y::int4 i4, z::int8 i8,
           x::float2 f2, y::float4 f4, z::float8 f8,
           CASE WHEN x BETWEEN -128 AND 127 THEN x::int1 ELSE 0 END i1
  INTO test02g
  FROM rt_numeric
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, x::int2 i2, y::int4 i4, z::int8 i8,
           x::float2 f2, y::float4 f4, z::float8 f8,
           CASE WHEN x BETWEEN -128 AND 127 THEN x::int1 ELSE 0 END i1
  INTO test02p
  FROM rt_numeric
 WHERE id > 0;
SELECT g.*, p.*
  FROM test02g g JOIN test02p p ON g.id = p.id
 WHERE g.i2 <> p.i2
    OR g.i4 <> p.i4
    OR g.i8 <> p.i8
    OR @(g.f2 - p.f2) > 0.01
    OR @(g.f4 - p.f4) > 0.01
    OR @(g.f8 - p.f8) > 0.01;
 id | i2 | i4 | i8 | f2 | f4 | f8 | i1 | id | i2 | i4 | i8 | f2 | f4 | f8 | i1 
----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----
(0 rows)

-- numeric operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, x+y v1, y-z v2, x*z v3, +x v4, -y v5, @z v6
  INTO test03g
  FROM rt_numeric
 WHERE id > 0;
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_numeric_temp.rt_numeric
   Output: id, ((x + y)), ((y - z)), ((x * z)), ((+ x)), ((- y)), ((@ z))
   GPU Projection: rt_numeric.id, (rt_numeric.x + rt_numeric.y), (rt_numeric.y - rt_numeric.z), (rt_numeric.x * rt_numeric.z), (+ rt_numeric.x), (- rt_numeric.y), (@ rt_numeric.z)
   GPU Scan Quals: (rt_numeric.id > 0)
(4 rows)

SELECT id, x+y v1, y-z v2, x*z v3, +x v4, -y v5, @z v6
  INTO test03g
  FROM rt_numeric
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, x+y v1, y-z v2, x*z v3, +x v4, -y v5, @z v6
  INTO test03p
  FROM rt_numeric
 WHERE id > 0;
(SELECT * FROM test03g EXCEPT SELECT * FROM test03p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test03p EXCEPT SELECT * FROM test03g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 
----+----+----+----+----+----+----
(0 rows)

-- numeric comparison
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, x = y eq, x <> y ne, x > y gt, x >= z ge, y < z lt, y <= x le
  INTO test04g
  FROM rt_numeric
 WHERE id > 0;
                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_numeric_temp.rt_numeric
   Output: id, ((x = y)), ((x <> y)), ((x > y)), ((x >= z)), ((y < z)), ((y <= x))
   GPU Projection: rt_numeric.id, (rt_numeric.x = rt_numeric.y), (rt_numeric.x <> rt_numeric.y), (rt_numeric.x > rt_numeric.y), (rt_numeric.x >= rt_numeric.z), (rt_numeric.y < rt_numeric.z), (rt_numeric.y <= rt_numeric.x)
   GPU Scan Quals: (rt_numeric.id > 0)
(4 rows)

SELECT id, x = y eq, x <> y ne, x > y gt, x >= z ge, y < z lt, y <= x le
  INTO test04g
  FROM rt_numeric
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, x = y eq, x <> y ne, x > y gt, x >= z ge, y < z lt, y <= x le
  INTO test04p
  FROM rt_numeric
 WHERE id > 0;
(SELECT * FROM test04g EXCEPT SELECT * FROM test04p) ORDER BY id;
 id | eq | ne | gt | ge | lt | le 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test04p EXCEPT SELECT * FROM test04g) ORDER BY id;
 id | eq | ne | gt | ge | lt | le 
----+----+----+----+----+----+----
(0 rows)

