---
--- Test for gpusort
---
\t on
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
RESET client_min_messages;
SET search_path = regtest_dtype_range_temp,public;
-- Generate answer data
SET pg_strom.enabled = off;
DROP TABLE IF EXISTS gpusort_answer1;
SELECT * INTO gpusort_answer1 FROM (
    SELECT c_region, c_nation, c_city, SUM(lo_revenue) lo_rev,
            RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY SUM(lo_revenue)) rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE rank < 4;
DROP TABLE IF EXISTS gpusort_answer2;
SELECT * INTO gpusort_answer2 FROM (
    SELECT c_region, c_nation, c_city, AVG(lo_revenue) lo_rev,
            DENSE_RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY AVG(lo_revenue)) dense_rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE dense_rank <= 4;
DROP TABLE IF EXISTS gpusort_answer3;
SELECT * INTO gpusort_answer3 FROM (
    SELECT c_region, c_nation, c_city, MAX(lo_revenue) lo_rev,
            ROW_NUMBER() OVER(PARTITION BY c_region, c_nation
                        ORDER BY MAX(lo_revenue)) row_number
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE row_number <= 4;
SET pg_strom.enabled = on;
SET pg_strom.cpu_fallback = off;
DROP TABLE IF EXISTS gpusort_result1;
NOTICE:  table "gpusort_result1" does not exist, skipping
EXPLAIN
SELECT * INTO gpusort_result1 FROM (
    SELECT c_region, c_nation, c_city, SUM(lo_revenue) lo_rev,
            RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY SUM(lo_revenue)) rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE rank < 4;
 WindowAgg  (cost=53151.45..53225.20 rows=500 width=80)
   Run Condition: (rank() OVER (?) < 4)
   ->  Gather  (cost=53151.45..53215.20 rows=500 width=72)
         Workers Planned: 2
         ->  Result  (cost=52151.45..52165.20 rows=500 width=72)
               ->  Parallel Custom Scan (GpuPreAgg) on lineorder  (cost=52151.45..52157.70 rows=500 width=72)
                     GPU Projection: pgstrom.psum(lo_revenue), c_region, c_nation, c_city
                     GPU Scan Quals: (lo_shipmode = ANY ('{RAIL,SHIP}'::bpchar[])) [plan: 6001105 -> 719549]
                     GPU Join Quals [1]: (lo_custkey = c_custkey) [plan: 719549 -> 719549]
                     GPU Outer Hash [1]: lo_custkey
                     GPU Inner Hash [1]: c_custkey
                     GPU Group Key: c_region, c_nation, c_city
                     GPU-Sort keys: c_region, c_nation, pgstrom.fsum_numeric((pgstrom.psum(lo_revenue)))
                     Window-Rank Filter: rank() over(PARTITION BY c_region, c_nation ORDER BY pgstrom.fsum_numeric((pgstrom.psum(lo_revenue)))) < 4
                     ->  Parallel Seq Scan on customer  (cost=0.00..687.47 rows=17647 width=44)

SELECT * INTO gpusort_result1 FROM (
    SELECT c_region, c_nation, c_city, SUM(lo_revenue) lo_rev,
            RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY SUM(lo_revenue)) rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE rank < 4;
(SELECT * FROM gpusort_result1 EXCEPT SELECT * FROM gpusort_answer1);

(SELECT * FROM gpusort_answer1 EXCEPT SELECT * FROM gpusort_result1);

DROP TABLE IF EXISTS gpusort_result2;
EXPLAIN
SELECT * INTO gpusort_result2 FROM (
    SELECT c_region, c_nation, c_city, AVG(lo_revenue) lo_rev,
            DENSE_RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY AVG(lo_revenue)) dense_rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE dense_rank <= 4;
 WindowAgg  (cost=53153.01..53245.20 rows=625 width=80)
   Run Condition: (dense_rank() OVER (?) <= 4)
   ->  Gather  (cost=53153.01..53232.70 rows=625 width=72)
         Workers Planned: 2
         ->  Result  (cost=52153.01..52170.20 rows=625 width=72)
               ->  Parallel Custom Scan (GpuPreAgg) on lineorder  (cost=52153.01..52160.83 rows=625 width=72)
                     GPU Projection: pgstrom.pavg(lo_revenue), c_region, c_nation, c_city
                     GPU Scan Quals: (lo_shipmode = ANY ('{RAIL,SHIP}'::bpchar[])) [plan: 6001105 -> 719549]
                     GPU Join Quals [1]: (lo_custkey = c_custkey) [plan: 719549 -> 719549]
                     GPU Outer Hash [1]: lo_custkey
                     GPU Inner Hash [1]: c_custkey
                     GPU Group Key: c_region, c_nation, c_city
                     GPU-Sort keys: c_region, c_nation, pgstrom.favg_numeric((pgstrom.pavg(lo_revenue)))
                     Window-Rank Filter: dense_rank() over(PARTITION BY c_region, c_nation ORDER BY pgstrom.favg_numeric((pgstrom.pavg(lo_revenue)))) < 5
                     ->  Parallel Seq Scan on customer  (cost=0.00..687.47 rows=17647 width=44)

SELECT * INTO gpusort_result2 FROM (
    SELECT c_region, c_nation, c_city, AVG(lo_revenue) lo_rev,
            DENSE_RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY AVG(lo_revenue)) dense_rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE dense_rank <= 4;
(SELECT * FROM gpusort_result2 EXCEPT SELECT * FROM gpusort_answer2);

(SELECT * FROM gpusort_answer2 EXCEPT SELECT * FROM gpusort_result2);

DROP TABLE IF EXISTS gpusort_result3;
EXPLAIN
SELECT * INTO gpusort_result3 FROM (
    SELECT c_region, c_nation, c_city, MAX(lo_revenue) lo_rev,
            ROW_NUMBER() OVER(PARTITION BY c_region, c_nation
                        ORDER BY MAX(lo_revenue)) row_number
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE row_number <= 4;
 WindowAgg  (cost=53262.63..53357.94 rows=625 width=80)
   Run Condition: (row_number() OVER (?) <= 4)
   ->  Gather  (cost=53262.63..53345.44 rows=625 width=72)
         Workers Planned: 2
         ->  Result  (cost=52262.63..52282.94 rows=625 width=72)
               ->  Parallel Custom Scan (GpuPreAgg) on lineorder  (cost=52262.63..52272.01 rows=625 width=72)
                     GPU Projection: pgstrom.pmax((lo_revenue)::double precision), c_region, c_nation, c_city
                     GPU Scan Quals: (lo_shipmode = ANY ('{RAIL,SHIP}'::bpchar[])) [plan: 6001105 -> 719549]
                     GPU Join Quals [1]: (lo_custkey = c_custkey) [plan: 719549 -> 719549]
                     GPU Outer Hash [1]: lo_custkey
                     GPU Inner Hash [1]: c_custkey
                     GPU Group Key: c_region, c_nation, c_city
                     GPU-Sort keys: c_region, c_nation, pgstrom.fmax_num((pgstrom.pmax((lo_revenue)::double precision)))
                     Window-Rank Filter: row_number() over(PARTITION BY c_region, c_nation ORDER BY pgstrom.fmax_num((pgstrom.pmax((lo_revenue)::double precision)))) < 5
                     ->  Parallel Seq Scan on customer  (cost=0.00..687.47 rows=17647 width=44)

SELECT * INTO gpusort_result3 FROM (
    SELECT c_region, c_nation, c_city, MAX(lo_revenue) lo_rev,
            ROW_NUMBER() OVER(PARTITION BY c_region, c_nation
                        ORDER BY MAX(lo_revenue)) row_number
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE row_number <= 4;
(SELECT * FROM gpusort_result3 EXCEPT SELECT * FROM gpusort_answer3);

(SELECT * FROM gpusort_answer3 EXCEPT SELECT * FROM gpusort_result3);

