---
--- Micro test cases for floating-point operators / functions
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_dtype_float_temp CASCADE;
CREATE SCHEMA regtest_dtype_float_temp;
RESET client_min_messages;
SET search_path = regtest_dtype_float_temp,public;
CREATE TABLE rt_float (
  id   int,
  a    float2,
  b    float2,
  c    float4,
  d    float4,
  e    float8,
  f    float8,
  x    int2,
  y    int4,
  z    int8
);
SELECT pgstrom.random_setseed(20190609);
 random_setseed 
----------------
 
(1 row)

INSERT INTO rt_float (
  SELECT x, pgstrom.random_float(1,     -3200.0,     3200.0),
            pgstrom.random_float(1,     -3200.0,     3200.0),
            pgstrom.random_float(1,  -8000000.0,  8000000.0),
            pgstrom.random_float(1,  -8000000.0,  8000000.0),
            pgstrom.random_float(1, -80000000.0, 80000000.0),
            pgstrom.random_float(1, -80000000.0, 80000000.0),
            pgstrom.random_int(0,  -3200,  3200),
            pgstrom.random_int(0, -32000, 32000),
            pgstrom.random_int(0, -32000, 32000)
    FROM generate_series(1,2000) x);
ALTER TABLE rt_float ADD p int1;
UPDATE rt_float SET p=(id%256-128);
-- force to use GpuScan, instead of SeqScan
SET enable_seqscan = off;
-- cast operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, (c/400.0)::float2 c, (e/4000.0)::float2 e,
       x::float2, y::float2, z::float2, p::float2
  INTO test01g
  FROM rt_float
 WHERE x BETWEEN -1800 AND 1800;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, (((c / '400'::double precision))::float2), (((e / '4000'::double precision))::float2), ((x)::float2), ((y)::float2), ((z)::float2), ((p)::float2)
   GPU Projection: rt_float.id, ((rt_float.c / '400'::double precision))::float2, ((rt_float.e / '4000'::double precision))::float2, (rt_float.x)::float2, (rt_float.y)::float2, (rt_float.z)::float2, (rt_float.p)::float2
   GPU Scan Quals: ((rt_float.x >= '-1800'::integer) AND (rt_float.x <= 1800))
(4 rows)

SELECT id, (c/400.0)::float2 c, (e/4000.0)::float2 e,
       x::float2, y::float2, z::float2, p::float2
  INTO test01g
  FROM rt_float
 WHERE x BETWEEN -1800 AND 1800;
SET pg_strom.enabled = off;
SELECT id, (c/400.0)::float2 c, (e/4000.0)::float2 e,
       x::float2, y::float2, z::float2, p::float2
  INTO test01p
  FROM rt_float
 WHERE x BETWEEN -1800 AND 1800;
(SELECT * FROM test01g EXCEPT ALL SELECT * FROM test01p) ORDER BY id;
 id | c | e | x | y | z | p 
----+---+---+---+---+---+---
(0 rows)

(SELECT * FROM test01p EXCEPT ALL SELECT * FROM test01g) ORDER BY id;
 id | c | e | x | y | z | p 
----+---+---+---+---+---+---
(0 rows)

SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, a::float4, e::float4, x::float4, y::float4, z::float4, p::float4
  INTO test02g
  FROM rt_float
 WHERE x < 0;
                                                                      QUERY PLAN                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a)::real), ((e)::real), ((x)::real), ((y)::real), ((z)::real), ((p)::real)
   GPU Projection: rt_float.id, (rt_float.a)::real, (rt_float.e)::real, (rt_float.x)::real, (rt_float.y)::real, (rt_float.z)::real, (rt_float.p)::real
   GPU Scan Quals: (rt_float.x < 0)
(4 rows)

SELECT id, a::float4, e::float4, x::float4, y::float4, z::float4, p::float4
  INTO test02g
  FROM rt_float
 WHERE x < 0;
SET pg_strom.enabled = off;
SELECT id, a::float4, e::float4, x::float4, y::float4, z::float4, p::float4
  INTO test02p
  FROM rt_float
 WHERE x < 0;
(SELECT * FROM test02g EXCEPT ALL SELECT * FROM test02p) ORDER BY id;
 id | a | e | x | y | z | p 
----+---+---+---+---+---+---
(0 rows)

(SELECT * FROM test02p EXCEPT ALL SELECT * FROM test02g) ORDER BY id;
 id | a | e | x | y | z | p 
----+---+---+---+---+---+---
(0 rows)

SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, a::float8, c::float8, x::float8, y::float8, z::float8, p::float8
  INTO test03g
  FROM rt_float
 WHERE x > 0;
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a)::double precision), ((c)::double precision), ((x)::double precision), ((y)::double precision), ((z)::double precision), ((p)::double precision)
   GPU Projection: rt_float.id, (rt_float.a)::double precision, (rt_float.c)::double precision, (rt_float.x)::double precision, (rt_float.y)::double precision, (rt_float.z)::double precision, (rt_float.p)::double precision
   GPU Scan Quals: (rt_float.x > 0)
(4 rows)

SELECT id, a::float8, c::float8, x::float8, y::float8, z::float8, p::float8
  INTO test03g
  FROM rt_float
 WHERE x > 0;
SET pg_strom.enabled = off;
SELECT id, a::float8, c::float8, x::float8, y::float8, z::float8, p::float8
  INTO test03p
  FROM rt_float
 WHERE x > 0;
(SELECT * FROM test03g EXCEPT ALL SELECT * FROM test03p) ORDER BY id;
 id | a | c | x | y | z | p 
----+---+---+---+---+---+---
(0 rows)

(SELECT * FROM test03p EXCEPT ALL SELECT * FROM test03g) ORDER BY id;
 id | a | c | x | y | z | p 
----+---+---+---+---+---+---
(0 rows)

-- '+' operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, a+b v1, a+c v2, a+e v3,
           c+b v4, c+d v5, c+e v6,
           e+b v7, e+d v8, e+f v9
  INTO test10g
  FROM rt_float
 WHERE y BETWEEN -16000 AND 16000;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a + b)), ((a + c)), ((a + e)), ((c + b)), ((c + d)), ((c + e)), ((e + b)), ((e + d)), ((e + f))
   GPU Projection: rt_float.id, (rt_float.a + rt_float.b), (rt_float.a + rt_float.c), (rt_float.a + rt_float.e), (rt_float.c + rt_float.b), (rt_float.c + rt_float.d), (rt_float.c + rt_float.e), (rt_float.e + rt_float.b), (rt_float.e + rt_float.d), (rt_float.e + rt_float.f)
   GPU Scan Quals: ((rt_float.y >= '-16000'::integer) AND (rt_float.y <= 16000))
(4 rows)

SELECT id, a+b v1, a+c v2, a+e v3,
           c+b v4, c+d v5, c+e v6,
           e+b v7, e+d v8, e+f v9
  INTO test10g
  FROM rt_float
 WHERE y BETWEEN -16000 AND 16000;
SET pg_strom.enabled = off;
SELECT id, a+b v1, a+c v2, a+e v3,
           c+b v4, c+d v5, c+e v6,
           e+b v7, e+d v8, e+f v9
  INTO test10p
  FROM rt_float
 WHERE y BETWEEN -16000 AND 16000;
(SELECT * FROM test10g EXCEPT ALL SELECT * FROM test10p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test10p EXCEPT ALL SELECT * FROM test10g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '-' operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, a-b v1, a-c v2, a-e v3,
           c-b v4, c-d v5, c-e v6,
           e-b v7, e-d v8, e-f v9
  INTO test11g
  FROM rt_float
 WHERE y < 0;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a - b)), ((a - c)), ((a - e)), ((c - b)), ((c - d)), ((c - e)), ((e - b)), ((e - d)), ((e - f))
   GPU Projection: rt_float.id, (rt_float.a - rt_float.b), (rt_float.a - rt_float.c), (rt_float.a - rt_float.e), (rt_float.c - rt_float.b), (rt_float.c - rt_float.d), (rt_float.c - rt_float.e), (rt_float.e - rt_float.b), (rt_float.e - rt_float.d), (rt_float.e - rt_float.f)
   GPU Scan Quals: (rt_float.y < 0)
(4 rows)

SELECT id, a-b v1, a-c v2, a-e v3,
           c-b v4, c-d v5, c-e v6,
           e-b v7, e-d v8, e-f v9
  INTO test11g
  FROM rt_float
 WHERE y < 0;
SET pg_strom.enabled = off;
SELECT id, a-b v1, a-c v2, a-e v3,
           c-b v4, c-d v5, c-e v6,
           e-b v7, e-d v8, e-f v9
  INTO test11p
  FROM rt_float
 WHERE y < 0;
(SELECT * FROM test11g EXCEPT ALL SELECT * FROM test11p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test11p EXCEPT ALL SELECT * FROM test11g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '*' operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, a*b v1, a*c v2, a*e v3,
           c*b v4, c*d v5, c*e v6,
           e*b v7, e*d v8, e*f v9
  INTO test12g
  FROM rt_float
 WHERE y > 0;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a * b)), ((a * c)), ((a * e)), ((c * b)), ((c * d)), ((c * e)), ((e * b)), ((e * d)), ((e * f))
   GPU Projection: rt_float.id, (rt_float.a * rt_float.b), (rt_float.a * rt_float.c), (rt_float.a * rt_float.e), (rt_float.c * rt_float.b), (rt_float.c * rt_float.d), (rt_float.c * rt_float.e), (rt_float.e * rt_float.b), (rt_float.e * rt_float.d), (rt_float.e * rt_float.f)
   GPU Scan Quals: (rt_float.y > 0)
(4 rows)

SELECT id, a*b v1, a*c v2, a*e v3,
           c*b v4, c*d v5, c*e v6,
           e*b v7, e*d v8, e*f v9
  INTO test12g
  FROM rt_float
 WHERE y > 0;
SET pg_strom.enabled = off;
SELECT id, a*b v1, a*c v2, a*e v3,
           c*b v4, c*d v5, c*e v6,
           e*b v7, e*d v8, e*f v9
  INTO test12p
  FROM rt_float
 WHERE y > 0;
(SELECT * FROM test12g EXCEPT ALL SELECT * FROM test12p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test12p EXCEPT ALL SELECT * FROM test12g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '/' operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, a/b v1, a/d v2, a/f v3,
           c/b v4, c/d v5, c/f v6,
           e/b v7, e/d v8, e/f v9
  INTO test13g
  FROM rt_float
 WHERE z BETWEEN -16000 AND 16000
   AND b != 0.0 AND d != 0.0 AND f != 0.0;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a / b)), ((a / d)), ((a / f)), ((c / b)), ((c / d)), ((c / f)), ((e / b)), ((e / d)), ((e / f))
   GPU Projection: rt_float.id, (rt_float.a / rt_float.b), (rt_float.a / rt_float.d), (rt_float.a / rt_float.f), (rt_float.c / rt_float.b), (rt_float.c / rt_float.d), (rt_float.c / rt_float.f), (rt_float.e / rt_float.b), (rt_float.e / rt_float.d), (rt_float.e / rt_float.f)
   GPU Scan Quals: ((rt_float.z >= '-16000'::integer) AND (rt_float.z <= 16000) AND (rt_float.b <> '0'::double precision) AND (rt_float.d <> '0'::double precision) AND (rt_float.f <> '0'::double precision))
(4 rows)

SELECT id, a/b v1, a/d v2, a/f v3,
           c/b v4, c/d v5, c/f v6,
           e/b v7, e/d v8, e/f v9
  INTO test13g
  FROM rt_float
 WHERE z BETWEEN -16000 AND 16000
   AND b != 0.0 AND d != 0.0 AND f != 0.0;
SET pg_strom.enabled = off;
SELECT id, a/b v1, a/d v2, a/f v3,
           c/b v4, c/d v5, c/f v6,
           e/b v7, e/d v8, e/f v9
  INTO test13p
  FROM rt_float
 WHERE z BETWEEN -16000 AND 16000
   AND b != 0.0 AND d != 0.0 AND f != 0.0;
SELECT *
FROM test13g g, test13p p
WHERE g.id=p.id 
AND (abs(g.v1 - p.v1) > 0.1 OR abs(g.v2 - p.v2) > 0.1 OR abs(g.v3 - p.v3) > 0.001 OR
      abs(g.v4 - p.v4) > 0.001 OR abs(g.v5 - p.v5) > 0.001 OR abs(g.v6 - p.v6) > 0.001 OR
      abs(g.v7 - p.v7) > 0.001 OR abs(g.v8 - p.v8) > 0.001 OR abs(g.v9 - p.v9) > 0.001);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----
(0 rows)

-- unary operators ('+','-','@')
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (verbose, costs off)
SELECT id, +a v1, -b v2, @(a+b) v3,
           +c v4, -d v5, @(c+d) v6,
           +e v7, -f v8, @(e+f) v9
  INTO test14g
  FROM rt_float
 WHERE z < 0;
                                                                                                         QUERY PLAN                                                                                                         
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((+ a)), ((- b)), ((@ (a + b))), ((+ c)), ((- d)), ((@ (c + d))), ((+ e)), ((- f)), ((@ (e + f)))
   GPU Projection: rt_float.id, (+ rt_float.a), (- rt_float.b), (@ (rt_float.a + rt_float.b)), (+ rt_float.c), (- rt_float.d), (@ (rt_float.c + rt_float.d)), (+ rt_float.e), (- rt_float.f), (@ (rt_float.e + rt_float.f))
   GPU Scan Quals: (rt_float.z < 0)
(4 rows)

SELECT id, +a v1, -b v2, @(a+b) v3,
           +c v4, -d v5, @(c+d) v6,
           +e v7, -f v8, @(e+f) v9
  INTO test14g
  FROM rt_float
 WHERE z < 0;
SET pg_strom.enabled = off;
SELECT id, +a v1, -b v2, @(a+b) v3,
           +c v4, -d v5, @(c+d) v6,
           +e v7, -f v8, @(e+f) v9
  INTO test14p
  FROM rt_float
 WHERE z < 0;
SELECT *
FROM test14g g, test14p p
WHERE g.id=p.id 
AND (abs(g.v1 - p.v1) > 0.1 OR abs(g.v2 - p.v2) > 0.1 OR abs(g.v3 - p.v3) > 0.001 OR
      abs(g.v4 - p.v4) > 0.001 OR abs(g.v5 - p.v5) > 0.001 OR abs(g.v6 - p.v6) > 0.001 OR
      abs(g.v7 - p.v7) > 0.001 OR abs(g.v8 - p.v8) > 0.001 OR abs(g.v9 - p.v9) > 0.001);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '='  : equal operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (costs off, verbose)
SELECT id, a=b v1, a=d v2, a=f v3,
           c=b v4, c=d v5, c=f v6,
           e=b v7, e=d v8, e=f v9
  INTO test20g
  FROM rt_float
 WHERE id % 6 = 0;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a = b)), ((a = d)), ((a = f)), ((c = b)), ((c = d)), ((c = f)), ((e = b)), ((e = d)), ((e = f))
   GPU Projection: rt_float.id, (rt_float.a = rt_float.b), (rt_float.a = rt_float.d), (rt_float.a = rt_float.f), (rt_float.c = rt_float.b), (rt_float.c = rt_float.d), (rt_float.c = rt_float.f), (rt_float.e = rt_float.b), (rt_float.e = rt_float.d), (rt_float.e = rt_float.f)
   GPU Scan Quals: ((rt_float.id % 6) = 0)
(4 rows)

SELECT id, a=b v1, a=d v2, a=f v3,
           c=b v4, c=d v5, c=f v6,
           e=b v7, e=d v8, e=f v9
  INTO test20g
  FROM rt_float
 WHERE id % 6 = 0;
SET pg_strom.enabled = off;
SELECT id, a=b v1, a=d v2, a=f v3,
           c=b v4, c=d v5, c=f v6,
           e=b v7, e=d v8, e=f v9
  INTO test20p
  FROM rt_float
 WHERE id % 6 = 0;
(SELECT * FROM test20g EXCEPT ALL SELECT * FROM test20p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test20p EXCEPT ALL SELECT * FROM test20g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '<>' : not equal operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (costs off, verbose)
SELECT id, a<>b v1, a<>d v2, a<>f v3,
           c<>b v4, c<>d v5, c<>f v6,
           e<>b v7, e<>d v8, e<>f v9
  INTO test21g
  FROM rt_float
 WHERE id % 6 = 1;
                                                                                                                                        QUERY PLAN                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a <> b)), ((a <> d)), ((a <> f)), ((c <> b)), ((c <> d)), ((c <> f)), ((e <> b)), ((e <> d)), ((e <> f))
   GPU Projection: rt_float.id, (rt_float.a <> rt_float.b), (rt_float.a <> rt_float.d), (rt_float.a <> rt_float.f), (rt_float.c <> rt_float.b), (rt_float.c <> rt_float.d), (rt_float.c <> rt_float.f), (rt_float.e <> rt_float.b), (rt_float.e <> rt_float.d), (rt_float.e <> rt_float.f)
   GPU Scan Quals: ((rt_float.id % 6) = 1)
(4 rows)

SELECT id, a<>b v1, a<>d v2, a<>f v3,
           c<>b v4, c<>d v5, c<>f v6,
           e<>b v7, e<>d v8, e<>f v9
  INTO test21g
  FROM rt_float
 WHERE id % 6 = 1;
SET pg_strom.enabled = off;
SELECT id, a<>b v1, a<>d v2, a<>f v3,
           c<>b v4, c<>d v5, c<>f v6,
           e<>b v7, e<>d v8, e<>f v9
  INTO test21p
  FROM rt_float
 WHERE id % 6 = 1;
(SELECT * FROM test21g EXCEPT ALL SELECT * FROM test21p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test21p EXCEPT ALL SELECT * FROM test21g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '>'  : greater than operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (costs off, verbose)
SELECT id, a>b v1, a>d v2, a>f v3,
           c>b v4, c>d v5, c>f v6,
           e>b v7, e>d v8, e>f v9
  INTO test22g
  FROM rt_float
 WHERE id % 6 = 2;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a > b)), ((a > d)), ((a > f)), ((c > b)), ((c > d)), ((c > f)), ((e > b)), ((e > d)), ((e > f))
   GPU Projection: rt_float.id, (rt_float.a > rt_float.b), (rt_float.a > rt_float.d), (rt_float.a > rt_float.f), (rt_float.c > rt_float.b), (rt_float.c > rt_float.d), (rt_float.c > rt_float.f), (rt_float.e > rt_float.b), (rt_float.e > rt_float.d), (rt_float.e > rt_float.f)
   GPU Scan Quals: ((rt_float.id % 6) = 2)
(4 rows)

SELECT id, a>b v1, a>d v2, a>f v3,
           c>b v4, c>d v5, c>f v6,
           e>b v7, e>d v8, e>f v9
  INTO test22g
  FROM rt_float
 WHERE id % 6 = 2;
SET pg_strom.enabled = off;
SELECT id, a>b v1, a>d v2, a>f v3,
           c>b v4, c>d v5, c>f v6,
           e>b v7, e>d v8, e>f v9
  INTO test22p
  FROM rt_float
 WHERE id % 6 = 2;
(SELECT * FROM test22g EXCEPT ALL SELECT * FROM test22p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test22p EXCEPT ALL SELECT * FROM test22g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '<'  : less than operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (costs off, verbose)
SELECT id, a<b v1, a<d v2, a<f v3,
           c<b v4, c<d v5, c<f v6,
           e<b v7, e<d v8, e<f v9
  INTO test23g
  FROM rt_float
 WHERE id % 6 = 3;
                                                                                                                                    QUERY PLAN                                                                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a < b)), ((a < d)), ((a < f)), ((c < b)), ((c < d)), ((c < f)), ((e < b)), ((e < d)), ((e < f))
   GPU Projection: rt_float.id, (rt_float.a < rt_float.b), (rt_float.a < rt_float.d), (rt_float.a < rt_float.f), (rt_float.c < rt_float.b), (rt_float.c < rt_float.d), (rt_float.c < rt_float.f), (rt_float.e < rt_float.b), (rt_float.e < rt_float.d), (rt_float.e < rt_float.f)
   GPU Scan Quals: ((rt_float.id % 6) = 3)
(4 rows)

SELECT id, a<b v1, a<d v2, a<f v3,
           c<b v4, c<d v5, c<f v6,
           e<b v7, e<d v8, e<f v9
  INTO test23g
  FROM rt_float
 WHERE id % 6 = 3;
SET pg_strom.enabled = off;
SELECT id, a<b v1, a<d v2, a<f v3,
           c<b v4, c<d v5, c<f v6,
           e<b v7, e<d v8, e<f v9
  INTO test23p
  FROM rt_float
 WHERE id % 6 = 3;
(SELECT * FROM test23g EXCEPT ALL SELECT * FROM test23p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test23p EXCEPT ALL SELECT * FROM test23g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '>=' : equal operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (costs off, verbose)
SELECT id, a>=b v1, a>=d v2, a>=f v3,
           c>=b v4, c>=d v5, c>=f v6,
           e>=b v7, e>=d v8, e>=f v9
  INTO test24g
  FROM rt_float
 WHERE id % 6 = 4;
                                                                                                                                        QUERY PLAN                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a >= b)), ((a >= d)), ((a >= f)), ((c >= b)), ((c >= d)), ((c >= f)), ((e >= b)), ((e >= d)), ((e >= f))
   GPU Projection: rt_float.id, (rt_float.a >= rt_float.b), (rt_float.a >= rt_float.d), (rt_float.a >= rt_float.f), (rt_float.c >= rt_float.b), (rt_float.c >= rt_float.d), (rt_float.c >= rt_float.f), (rt_float.e >= rt_float.b), (rt_float.e >= rt_float.d), (rt_float.e >= rt_float.f)
   GPU Scan Quals: ((rt_float.id % 6) = 4)
(4 rows)

SELECT id, a>=b v1, a>=d v2, a>=f v3,
           c>=b v4, c>=d v5, c>=f v6,
           e>=b v7, e>=d v8, e>=f v9
  INTO test24g
  FROM rt_float
 WHERE id % 6 = 4;
SET pg_strom.enabled = off;
SELECT id, a>=b v1, a>=d v2, a>=f v3,
           c>=b v4, c>=d v5, c>=f v6,
           e>=b v7, e>=d v8, e>=f v9
  INTO test24p
  FROM rt_float
 WHERE id % 6 = 4;
(SELECT * FROM test24g EXCEPT ALL SELECT * FROM test24p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test24p EXCEPT ALL SELECT * FROM test24g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- '<=' : equal operators
SET pg_strom.enabled = on;
VACUUM ANALYZE;
EXPLAIN (costs off, verbose)
SELECT id, a<=b v1, a<=d v2, a<=f v3,
           c<=b v4, c<=d v5, c<=f v6,
           e<=b v7, e<=d v8, e<=f v9
  INTO test25g
  FROM rt_float
 WHERE id % 6 = 5;
                                                                                                                                        QUERY PLAN                                                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_float_temp.rt_float
   Output: id, ((a <= b)), ((a <= d)), ((a <= f)), ((c <= b)), ((c <= d)), ((c <= f)), ((e <= b)), ((e <= d)), ((e <= f))
   GPU Projection: rt_float.id, (rt_float.a <= rt_float.b), (rt_float.a <= rt_float.d), (rt_float.a <= rt_float.f), (rt_float.c <= rt_float.b), (rt_float.c <= rt_float.d), (rt_float.c <= rt_float.f), (rt_float.e <= rt_float.b), (rt_float.e <= rt_float.d), (rt_float.e <= rt_float.f)
   GPU Scan Quals: ((rt_float.id % 6) = 5)
(4 rows)

SELECT id, a<=b v1, a<=d v2, a<=f v3,
           c<=b v4, c<=d v5, c<=f v6,
           e<=b v7, e<=d v8, e<=f v9
  INTO test25g
  FROM rt_float
 WHERE id % 6 = 5;
SET pg_strom.enabled = off;
SELECT id, a<=b v1, a<=d v2, a<=f v3,
           c<=b v4, c<=d v5, c<=f v6,
           e<=b v7, e<=d v8, e<=f v9
  INTO test25p
  FROM rt_float
 WHERE id % 6 = 5;
(SELECT * FROM test25g EXCEPT ALL SELECT * FROM test25p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test25p EXCEPT ALL SELECT * FROM test25g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 
----+----+----+----+----+----+----+----+----+----
(0 rows)

-- cleanup temporary resource
SET client_min_messages = error;
DROP SCHEMA regtest_dtype_float_temp CASCADE;
