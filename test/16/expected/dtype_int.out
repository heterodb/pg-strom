---
--- Micro test cases for integer operators / functions
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_dtype_int_temp CASCADE;
CREATE SCHEMA regtest_dtype_int_temp;
RESET client_min_messages;
SET search_path = regtest_dtype_int_temp,public;
CREATE TABLE rt_int (
  id   int,
  a    int2,
  b    int2,
  c    int4,
  d    int4,
  e    int8,
  f    int8,
  x    float2,
  y    float4,
  z    float8
);
SELECT pgstrom.random_setseed(20190608);
 random_setseed 
----------------
 
(1 row)

INSERT INTO rt_int (
  SELECT x, pgstrom.random_int(1,  -3200,  3200),
            pgstrom.random_int(1,  -3200,  3200),
            pgstrom.random_int(1, -32000, 32000),
            pgstrom.random_int(1, -32000, 32000),
            pgstrom.random_int(1, -32000, 32000),
            pgstrom.random_int(1, -32000, 32000),
            pgstrom.random_float(0.5, -32000.0, 32000.0),
            pgstrom.random_float(0.5, -32000.0, 32000.0),
            pgstrom.random_float(0.5, -32000.0, 32000.0)
   FROM generate_series(1,2000) x);
ALTER TABLE rt_int ADD g int1, ADD h int2, ADD i int4, ADD j int8,  ADD k float2, ADD l float4, ADD m float8, ADD n int1; 
UPDATE rt_int SET g = (id% 256 -128);
UPDATE rt_int SET h = g, i = g, j = g, k = g, l = g, m = g, n = g;
VACUUM ANALYZE;
-- force to use GpuScan, instead of SeqScan
SET enable_seqscan = off;
-- cast operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, c::smallint, e::smallint, x::smallint, y::smallint, z::smallint, g::smallint
  INTO test01g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((c)::smallint), ((e)::smallint), ((x)::smallint), ((y)::smallint), ((z)::smallint), ((g)::smallint)
   GPU Projection: rt_int.id, (rt_int.c)::smallint, (rt_int.e)::smallint, (rt_int.x)::smallint, (rt_int.y)::smallint, (rt_int.z)::smallint, (rt_int.g)::smallint
   GPU Scan Quals: ((rt_int.x >= '-15000'::double precision) AND (rt_int.x <= '15000'::double precision))
(4 rows)

SELECT id, c::smallint, e::smallint, x::smallint, y::smallint, z::smallint, g::smallint
  INTO test01g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
SET pg_strom.enabled = off;
SELECT id, c::smallint, e::smallint, x::smallint, y::smallint, z::smallint, g::smallint
  INTO test01p
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
(SELECT * FROM test01g EXCEPT ALL SELECT * FROM test01p) order by id;
 id | c | e | x | y | z | g 
----+---+---+---+---+---+---
(0 rows)

(SELECT * FROM test01p EXCEPT ALL SELECT * FROM test01g) order by id;
 id | c | e | x | y | z | g 
----+---+---+---+---+---+---
(0 rows)

SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a::int, e::int, x::int, y::int, z::int, g::int
  INTO test02g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
                                                                        QUERY PLAN                                                                         
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a)::integer), ((e)::integer), ((x)::integer), ((y)::integer), ((z)::integer), ((g)::integer)
   GPU Projection: rt_int.id, (rt_int.a)::integer, (rt_int.e)::integer, (rt_int.x)::integer, (rt_int.y)::integer, (rt_int.z)::integer, (rt_int.g)::integer
   GPU Scan Quals: ((rt_int.x >= '-15000'::double precision) AND (rt_int.x <= '15000'::double precision))
(4 rows)

SELECT id, a::int, e::int, x::int, y::int, z::int, g::int
  INTO test02g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
SET pg_strom.enabled = off;
SELECT id, a::int, e::int, x::int, y::int, z::int, g::int
  INTO test02p
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
(SELECT * FROM test02g EXCEPT ALL SELECT * FROM test02p);
 id | a | e | x | y | z | g 
----+---+---+---+---+---+---
(0 rows)

(SELECT * FROM test02p EXCEPT ALL SELECT * FROM test02g);
 id | a | e | x | y | z | g 
----+---+---+---+---+---+---
(0 rows)

SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a::bigint, c::bigint, x::bigint, y::bigint, z::bigint, g::bigint
  INTO test03g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a)::bigint), ((c)::bigint), ((x)::bigint), ((y)::bigint), ((z)::bigint), ((g)::bigint)
   GPU Projection: rt_int.id, (rt_int.a)::bigint, (rt_int.c)::bigint, (rt_int.x)::bigint, (rt_int.y)::bigint, (rt_int.z)::bigint, (rt_int.g)::bigint
   GPU Scan Quals: ((rt_int.x >= '-15000'::double precision) AND (rt_int.x <= '15000'::double precision))
(4 rows)

SELECT id, a::bigint, c::bigint, x::bigint, y::bigint, z::bigint, g::bigint
  INTO test03g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
SET pg_strom.enabled = off;
SELECT id, a::bigint, c::bigint, x::bigint, y::bigint, z::bigint, g::bigint
  INTO test03p
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
(SELECT * FROM test03g EXCEPT ALL SELECT * FROM test03p);
 id | a | c | x | y | z | g 
----+---+---+---+---+---+---
(0 rows)

(SELECT * FROM test03p EXCEPT ALL SELECT * FROM test03g);
 id | a | c | x | y | z | g 
----+---+---+---+---+---+---
(0 rows)

SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, h::int1, i::int1, j::int1, k::int1, l::int1, m::int1
  INTO test04g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((h)::int1), ((i)::int1), ((j)::int1), ((k)::int1), ((l)::int1), ((m)::int1)
   GPU Projection: rt_int.id, (rt_int.h)::int1, (rt_int.i)::int1, (rt_int.j)::int1, (rt_int.k)::int1, (rt_int.l)::int1, (rt_int.m)::int1
   GPU Scan Quals: ((rt_int.x >= '-15000'::double precision) AND (rt_int.x <= '15000'::double precision))
(4 rows)

SELECT id, h::int1, i::int1, j::int1, k::int1, l::int1, m::int1
  INTO test04g
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
SET pg_strom.enabled = off;
SELECT id, h::int1, i::int1, j::int1, k::int1, l::int1, m::int1
  INTO test04p
  FROM rt_int
 WHERE x between -15000.0 AND 15000.0;
(SELECT * FROM test04g EXCEPT ALL SELECT * FROM test04p);
 id | h | i | j | k | l | m 
----+---+---+---+---+---+---
(0 rows)

(SELECT * FROM test04p EXCEPT ALL SELECT * FROM test04g);
 id | h | i | j | k | l | m 
----+---+---+---+---+---+---
(0 rows)

-- '+' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a+b v1, a+c v2, b+e v3, 
           c+b v4, c+d v5, c+e v6,
           e+a v7, e+d v8, e+f v9,
           a+g v10, c+g v11, e+g v12,
           CASE WHEN g BETWEEN -64 AND 63 THEN g+n ELSE 0 END v13
  INTO test10g
  FROM rt_int
 WHERE x >= 0;
                                                                                                                                                                                                           QUERY PLAN                                                                                                                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a + b)), ((a + c)), ((b + e)), ((c + b)), ((c + d)), ((c + e)), ((e + a)), ((e + d)), ((e + f)), ((a + g)), ((c + g)), ((e + g)), (CASE WHEN ((g >= '-64'::integer) AND (g <= 63)) THEN ((g + n))::integer ELSE 0 END)
   GPU Projection: rt_int.id, (rt_int.a + rt_int.b), (rt_int.a + rt_int.c), (rt_int.b + rt_int.e), (rt_int.c + rt_int.b), (rt_int.c + rt_int.d), (rt_int.c + rt_int.e), (rt_int.e + rt_int.a), (rt_int.e + rt_int.d), (rt_int.e + rt_int.f), (rt_int.a + rt_int.g), (rt_int.c + rt_int.g), (rt_int.e + rt_int.g), CASE WHEN ((rt_int.g >= '-64'::integer) AND (rt_int.g <= 63)) THEN ((rt_int.g + rt_int.n))::integer ELSE 0 END
   GPU Scan Quals: (rt_int.x >= '0'::double precision)
(4 rows)

SELECT id, a+b v1, a+c v2, b+e v3,
           c+b v4, c+d v5, c+e v6,
           e+a v7, e+d v8, e+f v9,
           a+g v10, c+g v11, e+g v12,
           CASE WHEN g BETWEEN -64 AND 63 THEN g+n ELSE 0 END v13
  INTO test10g
  FROM rt_int
 WHERE x >= 0;
SET pg_strom.enabled = off;
SELECT id, a+b v1, a+c v2, b+e v3,
           c+b v4, c+d v5, c+e v6,
           e+a v7, e+d v8, e+f v9,
           a+g v10, c+g v11, e+g v12,
           CASE WHEN g BETWEEN -64 AND 63 THEN g+n ELSE 0 END v13
  INTO test10p
  FROM rt_int
 WHERE x >= 0;
(SELECT * FROM test10g EXCEPT ALL SELECT * FROM test10p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test10p EXCEPT ALL SELECT * FROM test10g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '-' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a-b v1, a-c v2, b-e v3,
           c-b v4, c-d v5, c-e v6,
           e-a v7, e-d v8, e-f v9,
           a-g v10, c-g v11, e-g v12, g-n v13
  INTO test11g
  FROM rt_int
 WHERE x <= 0.0;
                                                                                                                                                               QUERY PLAN                                                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a - b)), ((a - c)), ((b - e)), ((c - b)), ((c - d)), ((c - e)), ((e - a)), ((e - d)), ((e - f)), ((a - g)), ((c - g)), ((e - g)), ((g - n))
   GPU Projection: rt_int.id, (rt_int.a - rt_int.b), (rt_int.a - rt_int.c), (rt_int.b - rt_int.e), (rt_int.c - rt_int.b), (rt_int.c - rt_int.d), (rt_int.c - rt_int.e), (rt_int.e - rt_int.a), (rt_int.e - rt_int.d), (rt_int.e - rt_int.f), (rt_int.a - rt_int.g), (rt_int.c - rt_int.g), (rt_int.e - rt_int.g), (rt_int.g - rt_int.n)
   GPU Scan Quals: (rt_int.x <= '0'::double precision)
(4 rows)

SELECT id, a-b v1, a-c v2, b-e v3,
           c-b v4, c-d v5, c-e v6,
           e-a v7, e-d v8, e-f v9,
           a-g v10, c-g v11, e-g v12, g-n v13
  INTO test11g
  FROM rt_int
 WHERE x <= 0.0;
SET pg_strom.enabled = off;
SELECT id, a-b v1, a-c v2, b-e v3,
           c-b v4, c-d v5, c-e v6,
           e-a v7, e-d v8, e-f v9,
           a-g v10, c-g v11, e-g v12, g-n v13
  INTO test11p
  FROM rt_int
 WHERE x <= 0.0;
(SELECT * FROM test11g EXCEPT ALL SELECT * FROM test11p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test11p EXCEPT ALL SELECT * FROM test11g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '*' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a * (b % 10) v1, a*c v2, a*e v3,
           c*b v4, c*d v5, c*e v6,
           e*b v7, e*d v8, e*f v9,
           a * (g %10) v10, c*g v11, e*g v12, 
           CASE WHEN g between -11 and 11 THEN g*n ELSE 0 END v15
  INTO test12g
  FROM rt_int
 WHERE x BETWEEN -10000.0 AND 20000.0;
                                                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a * ((b)::integer % 10))), ((a * c)), ((a * e)), ((c * b)), ((c * d)), ((c * e)), ((e * b)), ((e * d)), ((e * f)), ((a * ((g)::integer % 10))), ((c * g)), ((e * g)), (CASE WHEN ((g >= '-11'::integer) AND (g <= 11)) THEN ((g * n))::integer ELSE 0 END)
   GPU Projection: rt_int.id, (rt_int.a * ((rt_int.b)::integer % 10)), (rt_int.a * rt_int.c), (rt_int.a * rt_int.e), (rt_int.c * rt_int.b), (rt_int.c * rt_int.d), (rt_int.c * rt_int.e), (rt_int.e * rt_int.b), (rt_int.e * rt_int.d), (rt_int.e * rt_int.f), (rt_int.a * ((rt_int.g)::integer % 10)), (rt_int.c * rt_int.g), (rt_int.e * rt_int.g), CASE WHEN ((rt_int.g >= '-11'::integer) AND (rt_int.g <= 11)) THEN ((rt_int.g * rt_int.n))::integer ELSE 0 END
   GPU Scan Quals: ((rt_int.x >= '-10000'::double precision) AND (rt_int.x <= '20000'::double precision))
(4 rows)

SELECT id, a * (b % 10) v1, a*c v2, a*e v3,
           c*b v4, c*d v5, c*e v6,
           e*b v7, e*d v8, e*f v9,
           a * (g %10) v10, c*g v11, e*g v12, 
           CASE WHEN g between -11 and 11 THEN g*n ELSE 0 END v15
  INTO test12g
  FROM rt_int
 WHERE x BETWEEN -10000.0 AND 20000.0;
SET pg_strom.enabled = off;
SELECT id, a * (b % 10) v1, a*c v2, a*e v3,
           c*b v4, c*d v5, c*e v6,
           e*b v7, e*d v8, e*f v9,
           a * (g %10) v10, c*g v11, e*g v12, 
           CASE WHEN g between -11 and 11 THEN g*n ELSE 0 END v15
  INTO test12p
  FROM rt_int
 WHERE x BETWEEN -10000.0 AND 20000.0;
(SELECT * FROM test12g EXCEPT ALL SELECT * FROM test12p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v15 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test12p EXCEPT ALL SELECT * FROM test12g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v15 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '/' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a/(b%100) v1, a/(d%100) v2, a/(f%100) v3,
           c/(b%100) v4, c/(d%100) v5, c/(f%100) v6,
           e/(b%100) v7, e/(d%100) v8, e/(f%100) v9,
           g/(b%100) v10, g/(d%100) v11, g/(f%100) v12
  INTO test13g
  FROM rt_int
 WHERE x BETWEEN -20000.0 AND 10000.0
   AND (b%100) <> 0 AND (d%100) <> 0 AND (f%100) <> 0;
                                                                                                                                                                                                                                             QUERY PLAN                                                                                                                                                                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a / ((b)::integer % 100))), ((a / (d % 100))), ((a / (f % '100'::bigint))), ((c / ((b)::integer % 100))), ((c / (d % 100))), ((c / (f % '100'::bigint))), ((e / ((b)::integer % 100))), ((e / (d % 100))), ((e / (f % '100'::bigint))), ((g / ((b)::integer % 100))), ((g / (d % 100))), ((g / (f % '100'::bigint)))
   GPU Projection: rt_int.id, (rt_int.a / ((rt_int.b)::integer % 100)), (rt_int.a / (rt_int.d % 100)), (rt_int.a / (rt_int.f % '100'::bigint)), (rt_int.c / ((rt_int.b)::integer % 100)), (rt_int.c / (rt_int.d % 100)), (rt_int.c / (rt_int.f % '100'::bigint)), (rt_int.e / ((rt_int.b)::integer % 100)), (rt_int.e / (rt_int.d % 100)), (rt_int.e / (rt_int.f % '100'::bigint)), (rt_int.g / ((rt_int.b)::integer % 100)), (rt_int.g / (rt_int.d % 100)), (rt_int.g / (rt_int.f % '100'::bigint))
   GPU Scan Quals: ((rt_int.x >= '-20000'::double precision) AND (rt_int.x <= '10000'::double precision) AND ((rt_int.d % 100) <> 0) AND ((rt_int.f % '100'::bigint) <> 0) AND (((rt_int.b)::integer % 100) <> 0))
(4 rows)

SELECT id, a/(b%100) v1, a/(d%100) v2, a/(f%100) v3,
           c/(b%100) v4, c/(d%100) v5, c/(f%100) v6,
           e/(b%100) v7, e/(d%100) v8, e/(f%100) v9,
           g/(b%100) v10, g/(d%100) v11, g/(f%100) v12
  INTO test13g
  FROM rt_int
 WHERE x BETWEEN -20000.0 AND 10000.0
   AND (b%100) <> 0 AND (d%100) <> 0 AND (f%100) <> 0;
SET pg_strom.enabled = off;
SELECT id, a/(b%100) v1, a/(d%100) v2, a/(f%100) v3,
           c/(b%100) v4, c/(d%100) v5, c/(f%100) v6,
           e/(b%100) v7, e/(d%100) v8, e/(f%100) v9,
           g/(b%100) v10, g/(d%100) v11, g/(f%100) v12
  INTO test13p
  FROM rt_int
 WHERE x BETWEEN -20000.0 AND 10000.0
   AND (b%100) <> 0 AND (d%100) <> 0 AND (f%100) <> 0;
(SELECT * FROM test13g EXCEPT ALL SELECT * FROM test13p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----
(0 rows)

(SELECT * FROM test13p EXCEPT ALL SELECT * FROM test13g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----
(0 rows)

-- '%' operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a % 100::smallint v1, c % 1000::int v2, d % 1000::bigint v3, g % 100::int1 v4
  INTO test14g
  FROM rt_int
 WHERE y BETWEEN -15000.0 AND 15000.0;
                                                                  QUERY PLAN                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a % '100'::smallint)), ((c % 1000)), (((d)::bigint % '1000'::bigint)), ((g % '100'::int1))
   GPU Projection: rt_int.id, (rt_int.a % '100'::smallint), (rt_int.c % 1000), ((rt_int.d)::bigint % '1000'::bigint), (rt_int.g % '100'::int1)
   GPU Scan Quals: ((rt_int.y >= '-15000'::double precision) AND (rt_int.y <= '15000'::double precision))
(4 rows)

SELECT id, a % 100::smallint v1, c % 1000::int v2, d % 1000::bigint v3, g % 100::int1 v4
  INTO test14g
  FROM rt_int
 WHERE y BETWEEN -15000.0 AND 15000.0;
SET pg_strom.enabled = off;
SELECT id, a % 100::smallint v1, c % 1000::int v2, d % 1000::bigint v3, g % 100::int1 v4
  INTO test14p
  FROM rt_int
 WHERE y BETWEEN -15000.0 AND 15000.0;
(SELECT * FROM test14g EXCEPT ALL SELECT * FROM test14p);
 id | v1 | v2 | v3 | v4 
----+----+----+----+----
(0 rows)

(SELECT * FROM test14p EXCEPT ALL SELECT * FROM test14g);
 id | v1 | v2 | v3 | v4 
----+----+----+----+----
(0 rows)

-- unary operators ('+', '-' and '@')
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, +a v1, -b v2, @(a+b) v3,
           +c v4, -d v5, @(c+d) v6,
           +e v7, -f v8, @(e+f) v9,
           +g v10, -n v11, @(g-n/2) v12
  INTO test15g
  FROM rt_int
 WHERE y BETWEEN -10000.0 AND 20000.0
   AND n <> -128;	-- avoid out of range
                                                                                                                  QUERY PLAN                                                                                                                   
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((+ a)), ((- b)), ((@ (a + b))), (+ c), (- d), ((@ (c + d))), (+ e), (- f), ((@ (e + f))), ((+ g)), ((- n)), ((@ (g - (n / 2))))
   GPU Projection: rt_int.id, (+ rt_int.a), (- rt_int.b), (@ (rt_int.a + rt_int.b)), rt_int.c, rt_int.d, (@ (rt_int.c + rt_int.d)), rt_int.e, rt_int.f, (@ (rt_int.e + rt_int.f)), (+ rt_int.g), (- rt_int.n), (@ (rt_int.g - (rt_int.n / 2)))
   GPU Scan Quals: ((rt_int.y >= '-10000'::double precision) AND (rt_int.y <= '20000'::double precision) AND (rt_int.n <> '-128'::integer))
(4 rows)

SELECT id, +a v1, -b v2, @(a+b) v3,
           +c v4, -d v5, @(c+d) v6,
           +e v7, -f v8, @(e+f) v9,
           +g v10, -n v11, @(g-n/2) v12
  INTO test15g
  FROM rt_int
 WHERE y BETWEEN -10000.0 AND 20000.0
   AND n <> -128;	-- avoid out of range
SET pg_strom.enabled = off;
SELECT id, +a v1, -b v2, @(a+b) v3,
           +c v4, -d v5, @(c+d) v6,
           +e v7, -f v8, @(e+f) v9,
           +g v10, -n v11, @(g-n/2) v12
  INTO test15p
  FROM rt_int
 WHERE y BETWEEN -10000.0 AND 20000.0
   AND n <> -128;	-- avoid out of range
(SELECT * FROM test15g EXCEPT ALL SELECT * FROM test15p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----
(0 rows)

(SELECT * FROM test15p EXCEPT ALL SELECT * FROM test15g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----
(0 rows)

-- '=' : equal operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a=b v1, a=d v2, a=f v3,
           c=b v4, c=d v5, c=f v6,
           e=b v7, e=d v8, e=f v9,
           g=b v10, g=d v11, g=f v12, g=n v13
  INTO test20g
  FROM rt_int
 WHERE id % 6 = 0;
                                                                                                                                                               QUERY PLAN                                                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a = b)), ((a = d)), ((a = f)), ((c = b)), ((c = d)), ((c = f)), ((e = b)), ((e = d)), ((e = f)), ((g = b)), ((g = d)), ((g = f)), ((g = n))
   GPU Projection: rt_int.id, (rt_int.a = rt_int.b), (rt_int.a = rt_int.d), (rt_int.a = rt_int.f), (rt_int.c = rt_int.b), (rt_int.c = rt_int.d), (rt_int.c = rt_int.f), (rt_int.e = rt_int.b), (rt_int.e = rt_int.d), (rt_int.e = rt_int.f), (rt_int.g = rt_int.b), (rt_int.g = rt_int.d), (rt_int.g = rt_int.f), (rt_int.g = rt_int.n)
   GPU Scan Quals: ((rt_int.id % 6) = 0)
(4 rows)

SELECT id, a=b v1, a=d v2, a=f v3,
           c=b v4, c=d v5, c=f v6,
           e=b v7, e=d v8, e=f v9,
           g=b v10, g=d v11, g=f v12, g=n v13
  INTO test20g
  FROM rt_int
 WHERE id % 6 = 0;
SET pg_strom.enabled = off;
SELECT id, a=b v1, a=d v2, a=f v3,
           c=b v4, c=d v5, c=f v6,
           e=b v7, e=d v8, e=f v9,
           g=b v10, g=d v11, g=f v12, g=n v13
  INTO test20p
  FROM rt_int
 WHERE id % 6 = 0;
(SELECT * FROM test20g EXCEPT ALL SELECT * FROM test20p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test20p EXCEPT ALL SELECT * FROM test20g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '<>' : not equal operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a<>b v1, a<>d v2, a<>f v3,
           c<>b v4, c<>d v5, c<>f v6,
           e<>b v7, e<>d v8, e<>f v9,
           g<>b v10, g<>d v11, g<>f v12, g <> n v13
  INTO test21g
  FROM rt_int
 WHERE id % 6 = 1;
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a <> b)), ((a <> d)), ((a <> f)), ((c <> b)), ((c <> d)), ((c <> f)), ((e <> b)), ((e <> d)), ((e <> f)), ((g <> b)), ((g <> d)), ((g <> f)), ((g <> n))
   GPU Projection: rt_int.id, (rt_int.a <> rt_int.b), (rt_int.a <> rt_int.d), (rt_int.a <> rt_int.f), (rt_int.c <> rt_int.b), (rt_int.c <> rt_int.d), (rt_int.c <> rt_int.f), (rt_int.e <> rt_int.b), (rt_int.e <> rt_int.d), (rt_int.e <> rt_int.f), (rt_int.g <> rt_int.b), (rt_int.g <> rt_int.d), (rt_int.g <> rt_int.f), (rt_int.g <> rt_int.n)
   GPU Scan Quals: ((rt_int.id % 6) = 1)
(4 rows)

SELECT id, a<>b v1, a<>d v2, a<>f v3,
           c<>b v4, c<>d v5, c<>f v6,
           e<>b v7, e<>d v8, e<>f v9,
           g<>b v10, g<>d v11, g<>f v12, g <> n v13
  INTO test21g
  FROM rt_int
 WHERE id % 6 = 1;
SET pg_strom.enabled = off;
SELECT id, a<>b v1, a<>d v2, a<>f v3,
           c<>b v4, c<>d v5, c<>f v6,
           e<>b v7, e<>d v8, e<>f v9,
           g<>b v10, g<>d v11, g<>f v12, g <> n v13
  INTO test21p
  FROM rt_int
 WHERE id % 6 = 1;
(SELECT * FROM test21g EXCEPT ALL SELECT * FROM test21p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test21p EXCEPT ALL SELECT * FROM test21g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '>' : greater than operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a>b v1, a>d v2, a>f v3,
           c>b v4, c>d v5, c>f v6,
           e>b v7, e>d v8, e>f v9,
           g>b v10, g>d v11, g>f v12, g>n v13
  INTO test22g
  FROM rt_int
 WHERE id % 6 = 2;
                                                                                                                                                               QUERY PLAN                                                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a > b)), ((a > d)), ((a > f)), ((c > b)), ((c > d)), ((c > f)), ((e > b)), ((e > d)), ((e > f)), ((g > b)), ((g > d)), ((g > f)), ((g > n))
   GPU Projection: rt_int.id, (rt_int.a > rt_int.b), (rt_int.a > rt_int.d), (rt_int.a > rt_int.f), (rt_int.c > rt_int.b), (rt_int.c > rt_int.d), (rt_int.c > rt_int.f), (rt_int.e > rt_int.b), (rt_int.e > rt_int.d), (rt_int.e > rt_int.f), (rt_int.g > rt_int.b), (rt_int.g > rt_int.d), (rt_int.g > rt_int.f), (rt_int.g > rt_int.n)
   GPU Scan Quals: ((rt_int.id % 6) = 2)
(4 rows)

SELECT id, a>b v1, a>d v2, a>f v3,
           c>b v4, c>d v5, c>f v6,
           e>b v7, e>d v8, e>f v9,
           g>b v10, g>d v11, g>f v12, g>n v13
  INTO test22g
  FROM rt_int
 WHERE id % 6 = 2;
SET pg_strom.enabled = off;
SELECT id, a>b v1, a>d v2, a>f v3,
           c>b v4, c>d v5, c>f v6,
           e>b v7, e>d v8, e>f v9,
           g>b v10, g>d v11, g>f v12, g>n v13
  INTO test22p
  FROM rt_int
 WHERE id % 6 = 2;
(SELECT * FROM test22g EXCEPT ALL SELECT * FROM test22p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test22p EXCEPT ALL SELECT * FROM test22g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '<' : less than operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a<b v1, a<d v2, a<f v3,
           c<b v4, c<d v5, c<f v6,
           e<b v7, e<d v8, e<f v9,
           g<b v10, g<d v11, g<f v12, g<n v13
  INTO test23g
  FROM rt_int
 WHERE id % 6 = 3;
                                                                                                                                                               QUERY PLAN                                                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a < b)), ((a < d)), ((a < f)), ((c < b)), ((c < d)), ((c < f)), ((e < b)), ((e < d)), ((e < f)), ((g < b)), ((g < d)), ((g < f)), ((g < n))
   GPU Projection: rt_int.id, (rt_int.a < rt_int.b), (rt_int.a < rt_int.d), (rt_int.a < rt_int.f), (rt_int.c < rt_int.b), (rt_int.c < rt_int.d), (rt_int.c < rt_int.f), (rt_int.e < rt_int.b), (rt_int.e < rt_int.d), (rt_int.e < rt_int.f), (rt_int.g < rt_int.b), (rt_int.g < rt_int.d), (rt_int.g < rt_int.f), (rt_int.g < rt_int.n)
   GPU Scan Quals: ((rt_int.id % 6) = 3)
(4 rows)

SELECT id, a<b v1, a<d v2, a<f v3,
           c<b v4, c<d v5, c<f v6,
           e<b v7, e<d v8, e<f v9,
           g<b v10, g<d v11, g<f v12, g<n v13
  INTO test23g
  FROM rt_int
 WHERE id % 6 = 3;
SET pg_strom.enabled = off;
SELECT id, a<b v1, a<d v2, a<f v3,
           c<b v4, c<d v5, c<f v6,
           e<b v7, e<d v8, e<f v9,
           g<b v10, g<d v11, g<f v12, g<n v13
  INTO test23p
  FROM rt_int
 WHERE id % 6 = 3;
(SELECT * FROM test23g EXCEPT ALL SELECT * FROM test23p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test23p EXCEPT ALL SELECT * FROM test23g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '>=' : greater than or equal to operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a>=b v1, a>=d v2, a>=f v3,
           c>=b v4, c>=d v5, c>=f v6,
           e>=b v7, e>=d v8, e>=f v9,
           g>=b v10, g>=d v11, g>=f v12, g>=n v13
  INTO test24g
  FROM rt_int
 WHERE id % 6 = 4;
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a >= b)), ((a >= d)), ((a >= f)), ((c >= b)), ((c >= d)), ((c >= f)), ((e >= b)), ((e >= d)), ((e >= f)), ((g >= b)), ((g >= d)), ((g >= f)), ((g >= n))
   GPU Projection: rt_int.id, (rt_int.a >= rt_int.b), (rt_int.a >= rt_int.d), (rt_int.a >= rt_int.f), (rt_int.c >= rt_int.b), (rt_int.c >= rt_int.d), (rt_int.c >= rt_int.f), (rt_int.e >= rt_int.b), (rt_int.e >= rt_int.d), (rt_int.e >= rt_int.f), (rt_int.g >= rt_int.b), (rt_int.g >= rt_int.d), (rt_int.g >= rt_int.f), (rt_int.g >= rt_int.n)
   GPU Scan Quals: ((rt_int.id % 6) = 4)
(4 rows)

SELECT id, a>=b v1, a>=d v2, a>=f v3,
           c>=b v4, c>=d v5, c>=f v6,
           e>=b v7, e>=d v8, e>=f v9,
           g>=b v10, g>=d v11, g>=f v12, g>=n v13
  INTO test24g
  FROM rt_int
 WHERE id % 6 = 4;
SET pg_strom.enabled = off;
SELECT id, a>=b v1, a>=d v2, a>=f v3,
           c>=b v4, c>=d v5, c>=f v6,
           e>=b v7, e>=d v8, e>=f v9,
           g>=b v10, g>=d v11, g>=f v12, g>=n v13
  INTO test24p
  FROM rt_int
 WHERE id % 6 = 4;
(SELECT * FROM test24g EXCEPT ALL SELECT * FROM test24p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test24p EXCEPT ALL SELECT * FROM test24g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- '<=' : less than or equal to operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a<=b v1, a<=d v2, a<=f v3,
           c<=b v4, c<=d v5, c<=f v6,
           e<=b v7, e<=d v8, e<=f v9,
           g<=b v10, g<=d v11, g<=f v12, g<=n v13
  INTO test25g
  FROM rt_int
 WHERE id % 6 = 5;
                                                                                                                                                                     QUERY PLAN                                                                                                                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a <= b)), ((a <= d)), ((a <= f)), ((c <= b)), ((c <= d)), ((c <= f)), ((e <= b)), ((e <= d)), ((e <= f)), ((g <= b)), ((g <= d)), ((g <= f)), ((g <= n))
   GPU Projection: rt_int.id, (rt_int.a <= rt_int.b), (rt_int.a <= rt_int.d), (rt_int.a <= rt_int.f), (rt_int.c <= rt_int.b), (rt_int.c <= rt_int.d), (rt_int.c <= rt_int.f), (rt_int.e <= rt_int.b), (rt_int.e <= rt_int.d), (rt_int.e <= rt_int.f), (rt_int.g <= rt_int.b), (rt_int.g <= rt_int.d), (rt_int.g <= rt_int.f), (rt_int.g <= rt_int.n)
   GPU Scan Quals: ((rt_int.id % 6) = 5)
(4 rows)

SELECT id, a<=b v1, a<=d v2, a<=f v3,
           c<=b v4, c<=d v5, c<=f v6,
           e<=b v7, e<=d v8, e<=f v9,
           g<=b v10, g<=d v11, g<=f v12, g<=n v13
  INTO test25g
  FROM rt_int
 WHERE id % 6 = 5;
SET pg_strom.enabled = off;
SELECT id, a<=b v1, a<=d v2, a<=f v3,
           c<=b v4, c<=d v5, c<=f v6,
           e<=b v7, e<=d v8, e<=f v9,
           g<=b v10, g<=d v11, g<=f v12, g<=n v13
  INTO test25p
  FROM rt_int
 WHERE id % 6 = 5;
(SELECT * FROM test25g EXCEPT ALL SELECT * FROM test25p);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test25p EXCEPT ALL SELECT * FROM test25g);
 id | v1 | v2 | v3 | v4 | v5 | v6 | v7 | v8 | v9 | v10 | v11 | v12 | v13 
----+----+----+----+----+----+----+----+----+----+-----+-----+-----+-----
(0 rows)

-- bitwise operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a&b v1, c&d v2, e&f v3, g&n v13,	-- bitwise AND
           a|b v4, c|d v5, e|f v6, g|n v14,	-- bitwise OR
           a#b v7, c#d v8, e#f v9, g#n v15,	-- bitwise XOR
           ~a v10, ~c v11, ~e v12, ~g v16	-- bitwise NOT
  INTO test30g
  FROM rt_int
 WHERE z BETWEEN -20000.0 AND 20000.0;
                                                                                                                                                                               QUERY PLAN                                                                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a & b)), ((c & d)), ((e & f)), ((g & n)), ((a | b)), ((c | d)), ((e | f)), ((g | n)), ((a # b)), ((c # d)), ((e # f)), ((g # n)), ((~ a)), ((~ c)), ((~ e)), ((~ g))
   GPU Projection: rt_int.id, (rt_int.a & rt_int.b), (rt_int.c & rt_int.d), (rt_int.e & rt_int.f), (rt_int.g & rt_int.n), (rt_int.a | rt_int.b), (rt_int.c | rt_int.d), (rt_int.e | rt_int.f), (rt_int.g | rt_int.n), (rt_int.a # rt_int.b), (rt_int.c # rt_int.d), (rt_int.e # rt_int.f), (rt_int.g # rt_int.n), (~ rt_int.a), (~ rt_int.c), (~ rt_int.e), (~ rt_int.g)
   GPU Scan Quals: ((rt_int.z >= '-20000'::double precision) AND (rt_int.z <= '20000'::double precision))
(4 rows)

SELECT id, a&b v1, c&d v2, e&f v3, g&n v13,	-- bitwise AND
           a|b v4, c|d v5, e|f v6, g|n v14,	-- bitwise OR
           a#b v7, c#d v8, e#f v9, g#n v15,	-- bitwise XOR
           ~a v10, ~c v11, ~e v12, ~g v16	-- bitwise NOT
  INTO test30g
  FROM rt_int
 WHERE z BETWEEN -20000.0 AND 20000.0;
SET pg_strom.enabled = off;
SELECT id, a&b v1, c&d v2, e&f v3, g&n v13,	-- bitwise AND
           a|b v4, c|d v5, e|f v6, g|n v14,	-- bitwise OR
           a#b v7, c#d v8, e#f v9, g#n v15,	-- bitwise XOR
           ~a v10, ~c v11, ~e v12, ~g v16	-- bitwise NOT
  INTO test30p
  FROM rt_int
 WHERE z BETWEEN -20000.0 AND 20000.0;
(SELECT * FROM test30g EXCEPT ALL SELECT * FROM test30p);
 id | v1 | v2 | v3 | v13 | v4 | v5 | v6 | v14 | v7 | v8 | v9 | v15 | v10 | v11 | v12 | v16 
----+----+----+----+-----+----+----+----+-----+----+----+----+-----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test30p EXCEPT ALL SELECT * FROM test30g);
 id | v1 | v2 | v3 | v13 | v4 | v5 | v6 | v14 | v7 | v8 | v9 | v15 | v10 | v11 | v12 | v16 
----+----+----+----+-----+----+----+----+-----+----+----+----+-----+-----+-----+-----+-----
(0 rows)

-- bit shift
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, a >> (id%10) v1, c >> (id%12) v2, e >> (id%12) v3, g >> (g/64) v7,
           b << (id%5)  v4, d << (id%7)  v5, f << (id%8)  v6, g << (id % 3) v8
  INTO test31g
  FROM rt_int
 WHERE z > -10000.0;
                                                                                                                                       QUERY PLAN                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_int_temp.rt_int
   Output: id, ((a >> (id % 10))), ((c >> (id % 12))), ((e >> (id % 12))), ((g >> (g / 64))), ((b << (id % 5))), ((d << (id % 7))), ((f << (id % 8))), ((g << (id % 3)))
   GPU Projection: rt_int.id, (rt_int.a >> (rt_int.id % 10)), (rt_int.c >> (rt_int.id % 12)), (rt_int.e >> (rt_int.id % 12)), (rt_int.g >> (rt_int.g / 64)), (rt_int.b << (rt_int.id % 5)), (rt_int.d << (rt_int.id % 7)), (rt_int.f << (rt_int.id % 8)), (rt_int.g << (rt_int.id % 3))
   GPU Scan Quals: (rt_int.z > '-10000'::double precision)
(4 rows)

SELECT id, a >> (id%10) v1, c >> (id%12) v2, e >> (id%12) v3, g >> (g/64) v7,
           b << (id%5)  v4, d << (id%7)  v5, f << (id%8)  v6, g << (id % 3) v8
  INTO test31g
  FROM rt_int
 WHERE z > -10000.0;
SET pg_strom.enabled = off;
SELECT id, a >> (id%10) v1, c >> (id%12) v2, e >> (id%12) v3, g >> (g/64) v7,
           b << (id%5)  v4, d << (id%7)  v5, f << (id%8)  v6, g << (id % 3) v8
  INTO test31p
  FROM rt_int
 WHERE z > -10000.0;
(SELECT * FROM test31g EXCEPT ALL SELECT * FROM test31p);
 id | v1 | v2 | v3 | v7 | v4 | v5 | v6 | v8 
----+----+----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test31p EXCEPT ALL SELECT * FROM test31g);
 id | v1 | v2 | v3 | v7 | v4 | v5 | v6 | v8 
----+----+----+----+----+----+----+----+----
(0 rows)

-- cleanup temporary resource
SET client_min_messages = error;
DROP SCHEMA regtest_dtype_int_temp CASCADE;
