---
--- Micro test cases for text / varchar operators / functions
---
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
DROP SCHEMA IF EXISTS regtest_dtype_text_temp CASCADE;
CREATE SCHEMA regtest_dtype_text_temp;
RESET client_min_messages;
---
--- check database encoding (must be UTF-8)
---
SELECT getdatabaseencoding();
 getdatabaseencoding 
---------------------
 UTF8
(1 row)

--- test database creation
SET search_path = regtest_dtype_text_temp,public;
CREATE TABLE rt_text (
  id    int,
  bc1   char(80)    COLLATE "C",
  bc2   char(80)    COLLATE "C",
  vc1   varchar(80) COLLATE "C",
  vc2   varchar(80) COLLATE "C",
  tc1   text        COLLATE "C",
  tc2   text        COLLATE "C"
);
SELECT pgstrom.random_setseed(20190616);
 random_setseed 
----------------
 
(1 row)

INSERT INTO rt_text (
  SELECT x, pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1,  80),
            pgstrom.random_text_len(1, 160),
            pgstrom.random_text_len(1, 160)
    FROM generate_series(1,3000) x
);
UPDATE rt_text SET tc1 = vc1 || '-' || tc1 || '-' || vc2
 WHERE id % 100 = 57;
VACUUM ANALYZE;
-- force to use GpuScan, instead of SeqScan
SET enable_seqscan = off;
-- type cast (relabel) operator
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1::text, bc2::varchar,
           vc1::char, vc2::text,
           tc1::char, tc2::varchar
  INTO test01g
  FROM rt_text
 WHERE id > 0;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (bc1)::text, (bc2)::character varying, (vc1)::character(1), ((vc2)::text), (tc1)::character(1), ((tc2)::character varying)
   GPU Projection: rt_text.id, rt_text.bc1, rt_text.bc2, rt_text.vc1, (rt_text.vc2)::text, rt_text.tc1, (rt_text.tc2)::character varying
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, bc1::text, bc2::varchar,
           vc1::char, vc2::text,
           tc1::char, tc2::varchar
  INTO test01g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1::text, bc2::varchar,
           vc1::char, vc2::text,
           tc1::char, tc2::varchar
  INTO test01p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test01g EXCEPT SELECT * FROM test01p) ORDER BY id;
 id | bc1 | bc2 | vc1 | vc2 | tc1 | tc2 
----+-----+-----+-----+-----+-----+-----
(0 rows)

(SELECT * FROM test01p EXCEPT SELECT * FROM test01g) ORDER BY id;
 id | bc1 | bc2 | vc1 | vc2 | tc1 | tc2 
----+-----+-----+-----+-----+-----+-----
(0 rows)

-- comparison operators
-- collation != C cannot run comparison
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1 = bc2 eq, bc1 <> bc2 ne,
           bc1 > bc2 lt, bc1 >= bc2 le,
           bc1 < bc2 gt, bc1 <= bc2 ge
  INTO test10g
  FROM rt_text
 WHERE id > 0;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((bc1 = bc2)), ((bc1 <> bc2)), ((bc1 > bc2)), ((bc1 >= bc2)), ((bc1 < bc2)), ((bc1 <= bc2))
   GPU Projection: rt_text.id, (rt_text.bc1 = rt_text.bc2), (rt_text.bc1 <> rt_text.bc2), (rt_text.bc1 > rt_text.bc2), (rt_text.bc1 >= rt_text.bc2), (rt_text.bc1 < rt_text.bc2), (rt_text.bc1 <= rt_text.bc2)
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, bc1 = bc2 eq, bc1 <> bc2 ne,
           bc1 > bc2 lt, bc1 >= bc2 le,
           bc1 < bc2 gt, bc1 <= bc2 ge
  INTO test10g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1 = bc2 eq, bc1 <> bc2 ne,
           bc1 > bc2 lt, bc1 >= bc2 le,
           bc1 < bc2 gt, bc1 <= bc2 ge
  INTO test10p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test10g EXCEPT SELECT * FROM test10p) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test10p EXCEPT SELECT * FROM test10g) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, tc1 = tc2 eq, tc1 <> tc2 ne,
           tc1 > tc2 lt, tc1 >= tc2 le,
           tc1 < tc2 gt, tc1 <= tc2 ge
  INTO test11g
  FROM rt_text
 WHERE id > 0;
                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((tc1 = tc2)), ((tc1 <> tc2)), ((tc1 > tc2)), ((tc1 >= tc2)), ((tc1 < tc2)), ((tc1 <= tc2))
   GPU Projection: rt_text.id, (rt_text.tc1 = rt_text.tc2), (rt_text.tc1 <> rt_text.tc2), (rt_text.tc1 > rt_text.tc2), (rt_text.tc1 >= rt_text.tc2), (rt_text.tc1 < rt_text.tc2), (rt_text.tc1 <= rt_text.tc2)
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, tc1 = tc2 eq, tc1 <> tc2 ne,
           tc1 > tc2 lt, tc1 >= tc2 le,
           tc1 < tc2 gt, tc1 <= tc2 ge
  INTO test11g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, tc1 = tc2 eq, tc1 <> tc2 ne,
           tc1 > tc2 lt, tc1 >= tc2 le,
           tc1 < tc2 gt, tc1 <= tc2 ge
  INTO test11p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test11g EXCEPT SELECT * FROM test11p) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

(SELECT * FROM test11p EXCEPT SELECT * FROM test11g) ORDER BY id;
 id | eq | ne | lt | le | gt | ge 
----+----+----+----+----+----+----
(0 rows)

-- LIKE & ILIKE operators
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1 LIKE '%ab%cd%' v1,
           bc2 LIKE '%bc_de%' v2,
           tc1 LIKE '%ef_gh%' v5,
           tc2 LIKE '%fg_hi%' v6
  INTO test20g
  FROM rt_text
 WHERE id > 0;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((bc1 ~~ '%ab%cd%'::text)), ((bc2 ~~ '%bc_de%'::text)), ((tc1 ~~ '%ef_gh%'::text)), ((tc2 ~~ '%fg_hi%'::text))
   GPU Projection: rt_text.id, (rt_text.bc1 ~~ '%ab%cd%'::text), (rt_text.bc2 ~~ '%bc_de%'::text), (rt_text.tc1 ~~ '%ef_gh%'::text), (rt_text.tc2 ~~ '%fg_hi%'::text)
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, bc1 LIKE '%ab%cd%' v1,
           bc2 LIKE '%bc_de%' v2,
           tc1 LIKE '%ef_gh%' v5,
           tc2 LIKE '%fg_hi%' v6
  INTO test20g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1 LIKE '%ab%cd%' v1,
           bc2 LIKE '%bc_de%' v2,
           tc1 LIKE '%ef_gh%' v5,
           tc2 LIKE '%fg_hi%' v6
  INTO test20p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test20g EXCEPT SELECT * FROM test20p) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

(SELECT * FROM test20p EXCEPT SELECT * FROM test20g) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

-- ILIKE is valid only non-multibyte encoding
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, bc1 ILIKE '%ab%cd%' v1,
           bc2 ILIKE '%bc_de%' v2,
           tc1 ILIKE '%ef_gh%' v5,
           tc2 ILIKE '%fg_hi%' v6
  INTO test21g
  FROM rt_text
 WHERE id > 0;
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, ((bc1 ~~* '%ab%cd%'::text)), ((bc2 ~~* '%bc_de%'::text)), ((tc1 ~~* '%ef_gh%'::text)), ((tc2 ~~* '%fg_hi%'::text))
   GPU Projection: rt_text.id, (rt_text.bc1 ~~* '%ab%cd%'::text), (rt_text.bc2 ~~* '%bc_de%'::text), (rt_text.tc1 ~~* '%ef_gh%'::text), (rt_text.tc2 ~~* '%fg_hi%'::text)
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, bc1 ILIKE '%ab%cd%' v1,
           bc2 ILIKE '%bc_de%' v2,
           tc1 ILIKE '%ef_gh%' v5,
           tc2 ILIKE '%fg_hi%' v6
  INTO test21g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, bc1 ILIKE '%ab%cd%' v1,
           bc2 ILIKE '%bc_de%' v2,
           tc1 ILIKE '%ef_gh%' v5,
           tc2 ILIKE '%fg_hi%' v6
  INTO test21p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test21g EXCEPT SELECT * FROM test21p) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

(SELECT * FROM test21p EXCEPT SELECT * FROM test21g) ORDER BY id;
 id | v1 | v2 | v5 | v6 
----+----+----+----+----
(0 rows)

-- '||' operator (textcat) can work on fixed max-length text
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, length(tc1) v1,
       tc1 || '_foo'  v2,
       substring(tc1, 1, 10) || '_bar' v3,
       vc1 || '_baz' v4,
       vc1 || '--' || vc2 v5
  INTO test30g
  FROM rt_text
 WHERE id > 0;
                                                                                 QUERY PLAN                                                                                 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (length(tc1)), (tc1 || '_foo'::text), ("substring"(tc1, 1, 10) || '_bar'::text), ((vc1)::text || '_baz'::text), (((vc1)::text || '--'::text) || (vc2)::text)
   GPU Projection: rt_text.id, length(rt_text.tc1), rt_text.tc1, rt_text.vc1, rt_text.vc2
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, length(tc1) v1,
       tc1 || '_foo'  v2,
       substring(tc1, 1, 10) || '_bar' v3,
       vc1 || '_baz' v4,
       vc1 || '--' || vc2 v5
  INTO test30g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, length(tc1) v1,
       tc1 || '_foo'  v2,
       substring(tc1, 1, 10) || '_bar' v3,
       vc1 || '_baz' v4,
       vc1 || '--' || vc2 v5
  INTO test30p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test30g EXCEPT SELECT * FROM test30p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

(SELECT * FROM test30p EXCEPT SELECT * FROM test30g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

-- substring
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, length(tc2) v1, 
       substring(vc1 || '-hoge-' || vc2, id % 15 + 5, 20) v5
  INTO test31g
  FROM rt_text
 WHERE id > 0;
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (length(tc2)), "substring"((((vc1)::text || '-hoge-'::text) || (vc2)::text), ((id % 15) + 5), 20)
   GPU Projection: rt_text.id, length(rt_text.tc2), rt_text.vc1, rt_text.vc2
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, length(tc2) v1, 
       substring(vc1 || '-hoge-' || vc2, id % 15 + 5, 20) v5
  INTO test31g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, length(tc2) v1, 
       substring(vc1 || '-hoge-' || vc2, id % 15 + 5, 20) v5
  INTO test31p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test31g EXCEPT SELECT * FROM test31p) ORDER BY id;
 id | v1 | v5 
----+----+----
(0 rows)

(SELECT * FROM test31p EXCEPT SELECT * FROM test31g) ORDER BY id;
 id | v1 | v5 
----+----+----
(0 rows)

-- variadic concat() also works on fixed max-length text
SET pg_strom.enabled = on;
EXPLAIN (costs off, verbose)
SELECT id, length(tc1) v1,
       concat(tc1, '_foo') v2,
	   concat(substring(tc1, 1, 10), '_bar') v3,
	   concat(substring(tc1, 1, 8), '--hoge--', substring(tc1, 8, 16)) v4,
	   concat(substring(tc1, 1, 8), substring(tc2, 1, 8), vc1, vc2) v5
  INTO test32g
  FROM rt_text
 WHERE id > 0;
                                                                                                            QUERY PLAN                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (GpuScan) on regtest_dtype_text_temp.rt_text
   Output: id, (length(tc1)), concat(tc1, '_foo'), concat("substring"(tc1, 1, 10), '_bar'), concat("substring"(tc1, 1, 8), '--hoge--', "substring"(tc1, 8, 16)), concat("substring"(tc1, 1, 8), "substring"(tc2, 1, 8), vc1, vc2)
   GPU Projection: rt_text.id, length(rt_text.tc1), rt_text.tc1, rt_text.tc2, rt_text.vc1, rt_text.vc2
   GPU Scan Quals: (rt_text.id > 0)
(4 rows)

SELECT id, length(tc1) v1,
       concat(tc1, '_foo') v2,
	   concat(substring(tc1, 1, 10), '_bar') v3,
	   concat(substring(tc1, 1, 8), '--hoge--', substring(tc1, 8, 16)) v4,
	   concat(substring(tc1, 1, 8), substring(tc2, 1, 8), vc1, vc2) v5
  INTO test32g
  FROM rt_text
 WHERE id > 0;
SET pg_strom.enabled = off;
SELECT id, length(tc1) v1,
       concat(tc1, '_foo') v2,
	   concat(substring(tc1, 1, 10), '_bar') v3,
	   concat(substring(tc1, 1, 8), '--hoge--', substring(tc1, 8, 16)) v4,
	   concat(substring(tc1, 1, 8), substring(tc2, 1, 8), vc1, vc2) v5
  INTO test32p
  FROM rt_text
 WHERE id > 0;
(SELECT * FROM test32g EXCEPT SELECT * FROM test32p) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

(SELECT * FROM test32p EXCEPT SELECT * FROM test32g) ORDER BY id;
 id | v1 | v2 | v3 | v4 | v5 
----+----+----+----+----+----
(0 rows)

-- cleanup temporary resource
SET client_min_messages = error;
DROP SCHEMA regtest_dtype_text_temp CASCADE;
