---
--- Test for gpusort
---
\t on
SET pg_strom.regression_test_mode = on;
SET client_min_messages = error;
RESET client_min_messages;
SET search_path = regtest_dtype_range_temp,public;
-- Generate answer data
SET pg_strom.enabled = off;
DROP TABLE IF EXISTS gpusort_answer1;
SELECT * INTO gpusort_answer1 FROM (
    SELECT c_region, c_nation, c_city, SUM(lo_revenue) lo_rev,
            RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY SUM(lo_revenue)) rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE rank < 4;
DROP TABLE IF EXISTS gpusort_answer2;
SELECT * INTO gpusort_answer2 FROM (
    SELECT c_region, c_nation, c_city, AVG(lo_revenue) lo_rev,
            DENSE_RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY AVG(lo_revenue)) dense_rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE dense_rank <= 4;
DROP TABLE IF EXISTS gpusort_answer3;
SELECT * INTO gpusort_answer3 FROM (
    SELECT c_region, c_nation, c_city, MAX(lo_revenue) lo_rev,
            ROW_NUMBER() OVER(PARTITION BY c_region, c_nation
                        ORDER BY MAX(lo_revenue) DESC) row_number
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE row_number < 4;
SET pg_strom.enabled = on;
SET pg_strom.cpu_fallback = off;
DROP TABLE IF EXISTS gpusort_result1;
EXPLAIN
SELECT * INTO gpusort_result1 FROM (
    SELECT c_region, c_nation, c_city, SUM(lo_revenue) lo_rev,
            RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY SUM(lo_revenue)) rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE rank < 4;
 WindowAgg  (cost=53039.78..53463.53 rows=3000 width=80)
   Run Condition: (rank() OVER (?) < 4)
   ->  Gather  (cost=53039.78..53403.53 rows=3000 width=72)
         Workers Planned: 2
         ->  Result  (cost=52039.78..52103.53 rows=3000 width=72)
               ->  Parallel Custom Scan (GpuPreAgg) on lineorder  (cost=52039.78..52058.53 rows=3000 width=72)
                     GPU Projection: pgstrom.psum(lo_revenue), c_region, c_nation, c_city
                     GPU Scan Quals: (lo_shipmode = ANY ('{RAIL,SHIP}'::bpchar[])) [plan: 6001105 -> 708047]
                     GPU Join Quals [1]: (lo_custkey = c_custkey) [plan: 708047 -> 708047
                     GPU Outer Hash [1]: lo_custkey
                     GPU Inner Hash [1]: c_custkey
                     GPU Group Key: c_region, c_nation, c_city
                     GPU-Sort keys: c_region, c_nation, pgstrom.fsum_numeric((pgstrom.psum(lo_revenue)))
                     ->  Parallel Seq Scan on customer  (cost=0.00..687.47 rows=17647 width=44)

SELECT * INTO gpusort_result1 FROM (
    SELECT c_region, c_nation, c_city, SUM(lo_revenue) lo_rev,
            RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY SUM(lo_revenue)) rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE rank < 4;
(SELECT * FROM gpusort_result1 EXCEPT SELECT * FROM gpusort_answer1);

(SELECT * FROM gpusort_answer1 EXCEPT SELECT * FROM gpusort_result1);

DROP TABLE IF EXISTS gpusort_result2;
EXPLAIN
SELECT * INTO gpusort_result2 FROM (
    SELECT c_region, c_nation, c_city, AVG(lo_revenue) lo_rev,
            DENSE_RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY AVG(lo_revenue)) dense_rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE dense_rank <= 4;
 WindowAgg  (cost=53039.78..53463.53 rows=3000 width=80)
   Run Condition: (dense_rank() OVER (?) <= 4)
   ->  Gather  (cost=53039.78..53403.53 rows=3000 width=72)
         Workers Planned: 2
         ->  Result  (cost=52039.78..52103.53 rows=3000 width=72)
               ->  Parallel Custom Scan (GpuPreAgg) on lineorder  (cost=52039.78..52058.53 rows=3000 width=72)
                     GPU Projection: pgstrom.pavg(lo_revenue), c_region, c_nation, c_city
                     GPU Scan Quals: (lo_shipmode = ANY ('{RAIL,SHIP}'::bpchar[])) [plan: 6001105 -> 708047]
                     GPU Join Quals [1]: (lo_custkey = c_custkey) [plan: 708047 -> 708047
                     GPU Outer Hash [1]: lo_custkey
                     GPU Inner Hash [1]: c_custkey
                     GPU Group Key: c_region, c_nation, c_city
                     GPU-Sort keys: c_region, c_nation, pgstrom.favg_numeric((pgstrom.pavg(lo_revenue)))
                     ->  Parallel Seq Scan on customer  (cost=0.00..687.47 rows=17647 width=44)

SELECT * INTO gpusort_result2 FROM (
    SELECT c_region, c_nation, c_city, AVG(lo_revenue) lo_rev,
            DENSE_RANK() OVER(PARTITION BY c_region, c_nation
                        ORDER BY AVG(lo_revenue)) dense_rank
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE dense_rank <= 4;
(SELECT * FROM gpusort_result2 EXCEPT SELECT * FROM gpusort_answer2);

(SELECT * FROM gpusort_answer2 EXCEPT SELECT * FROM gpusort_result2);

DROP TABLE IF EXISTS gpusort_result3;
EXPLAIN
SELECT * INTO gpusort_result3 FROM (
    SELECT c_region, c_nation, c_city, MAX(lo_revenue) lo_rev,
            ROW_NUMBER() OVER(PARTITION BY c_region, c_nation
                        ORDER BY MAX(lo_revenue) DESC) row_number
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE row_number < 4;
 WindowAgg  (cost=53677.21..53744.71 rows=3000 width=80)
   Run Condition: (row_number() OVER (?) < 4)
   ->  Sort  (cost=53677.21..53684.71 rows=3000 width=72)
         Sort Key: customer.c_region, customer.c_nation, (pgstrom.fmax_num((pgstrom.pmax((lineorder.lo_revenue)::double precision)))) DESC
         ->  Gather  (cost=53132.70..53503.95 rows=3000 width=72)
               Workers Planned: 2
               ->  Result  (cost=52132.70..52203.95 rows=3000 width=72)
                     ->  Parallel Custom Scan (GpuPreAgg) on lineorder  (cost=52132.70..52151.45 rows=3000 width=72)
                           GPU Projection: pgstrom.pmax((lo_revenue)::double precision), c_region, c_nation, c_city
                           GPU Scan Quals: (lo_shipmode = ANY ('{RAIL,SHIP}'::bpchar[])) [plan: 6001105 -> 708047]
                           GPU Join Quals [1]: (lo_custkey = c_custkey) [plan: 708047 -> 708047
                           GPU Outer Hash [1]: lo_custkey
                           GPU Inner Hash [1]: c_custkey
                           GPU Group Key: c_region, c_nation, c_city
                           ->  Parallel Seq Scan on customer  (cost=0.00..687.47 rows=17647 width=44)

SELECT * INTO gpusort_result3 FROM (
    SELECT c_region, c_nation, c_city, MAX(lo_revenue) lo_rev,
            ROW_NUMBER() OVER(PARTITION BY c_region, c_nation
                        ORDER BY MAX(lo_revenue) DESC) row_number
        FROM lineorder, customer
    WHERE lo_custkey = c_custkey
        AND lo_shipmode IN ('RAIL','SHIP')
        GROUP BY c_region, c_nation, c_city
) subqry
WHERE row_number < 4;
(SELECT * FROM gpusort_result3 EXCEPT SELECT * FROM gpusort_answer3);

(SELECT * FROM gpusort_answer3 EXCEPT SELECT * FROM gpusort_result3);

